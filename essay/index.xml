<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>随笔 on</title><link>https://guowei1651.github.io/essay/</link><description>Recent content in 随笔 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://guowei1651.github.io/essay/index.xml" rel="self" type="application/rss+xml"/><item><title>代码为什么越写越乱？</title><link>https://guowei1651.github.io/essay/%E5%8E%9F%E5%88%9B%E4%BB%A3%E7%A0%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B6%8A%E5%86%99%E8%B6%8A%E4%B9%B1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/essay/%E5%8E%9F%E5%88%9B%E4%BB%A3%E7%A0%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B6%8A%E5%86%99%E8%B6%8A%E4%B9%B1/</guid><description>1. 问题域定义 # 这个问题往大的说是业务治理问题，往小了说是代码分拆。 我的建议是自顶向下的思考，自顶向下的思考方式一方面全局的看一个问题，能给出一个问题最优解，另一方面因为只有这样才有成长，才能在下次遇到类似问题时解决问题。
考虑清楚为什么会形成超大的类？ 可以通过哪些方法对业务进行拆分，以达到拆分的效果？ 拆分完成之后怎么判断拆分的是否合理？ 2. 问题分析 # 2.1 怎么形成的超大类 # 刚开始编写这个文件的时候，我相信作者肯定是已经想过了这个类要负责什么，哪些业务应该在这个类中，这个类与上下游的关系是什么样的。但是最初在第一次业务变更时有一点不太应该在本类中加进来的业务代码，但跟本类有这强联系的代码就直接加。之后总有类似的事情发生，总有不是强相关，但又有关系的代码加入进来。导致代码随着业务不断地变化与调整，而逐渐的陷入混乱。
所以，不必担心业务代码不会增长，它的增长是不受控制的。就像物理学中的熵增定律一样，在一个封闭系统中，如果没有外部做功，它就会逐渐陷入混乱。
2.2 用什么进行业务治理？ # 业务代码的增长，随后陷入混乱是必然的，这件事是不是让人感到这个问题就无解了。因为不管改多少遍都会陷入混乱，在一个无法解决的问题上人们总是会感觉到无力，从而丧失解决从根本上解决问题的力量。
不要使用上帝类，在DDD中有上帝类的概念。上帝类就是在一个类中解决所有的问题，可以看到MVC模式中的Service就是上帝类的完美代表。所以，不要只用一种模式解决所有的问题。这里给出的都是思考的过程以及方式来解决问题。所以可能会感觉到泛泛之谈。
这里主要思想是DDD，但是经过了一些变形：明确服务边界，定义服务内容，阐述服务关系。具体到代码拆分上：
**从业务上划分包**：包中的业务是对于特定的业务实体的操作。 **定义包的边界**：包中的实体发生变化，应该以事件的方式通知其他关心的业务。而不是由本包解决所有的外部问题 **明确包与包之间的关系**：包中只负责本包该处理的业务，不负责其他业务实体的业务。例如：在下单之后，应该以事件的方式通知仓库，支付，物流等等去做该做的事情。而不是自己去做。 2.3 判断拆分的是否合理？ # 最简单的规则就是单一职责，拆分后的内容是否符合单一职责。然后就是扩展到SOLID规则。
3. 解决域展示 # 实际解决过也是一个不断演化的过程，接受代码会随着时间不断的变化才会接受这种解决方式。
第一阶段：facade模式 # 将facade类作为能力透出类，而拆分出的实际工作类作为业务功能类。例如：策略部署其实可以分为策略定义和策略的使用，就可以使用facade类向外暴露接口能力，然后策略定义一个类，测录使用一个类。
第二阶段：划分领域对象 # 进一步就是就是将拆分出的两个实现类再拆分为：工具类，服务类，外部事件处理类，领域事件类。从名字就可以知道它这些类的意义。
4. 总结 # 业务治理是长期工作，需要理解问题产生的原因才可以真正的解决问题。</description></item><item><title>代码为什么越写越乱？2</title><link>https://guowei1651.github.io/essay/%E4%BB%A3%E7%A0%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B6%8A%E6%9D%A5%E8%B6%8A%E4%B9%B1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/essay/%E4%BB%A3%E7%A0%81%E4%B8%BA%E4%BB%80%E4%B9%88%E8%B6%8A%E6%9D%A5%E8%B6%8A%E4%B9%B1/</guid><description>1. 问题域定义 # 这个问题往大的说是业务治理问题，往小了说是代码分拆。 我的建议是自顶向下的思考，自顶向下的思考方式一方面全局的看一个问题，能给出一个问题最优解，另一方面因为只有这样才有成长，才能在下次遇到类似问题时解决问题。
考虑清楚为什么会形成超大的类？ 可以通过哪些方法对业务进行拆分，以达到拆分的效果？ 拆分完成之后怎么判断拆分的是否合理？ 2. 问题分析 # 2.1 怎么形成的超大类 # 刚开始编写这个文件的时候，我相信作者肯定是已经想过了这个类要负责什么，哪些业务应该在这个类中，这个类与上下游的关系是什么样的。但是最初在第一次业务变更时有一点不太应该在本类中加进来的业务代码，但跟本类有这强联系的代码就直接加。之后总有类似的事情发生，总有不是强相关，但又有关系的代码加入进来。导致代码随着业务不断地变化与调整，而逐渐的陷入混乱。
所以，不必担心业务代码不会增长，它的增长是不受控制的。就像物理学中的熵增定律一样，在一个封闭系统中，如果没有外部做功，它就会逐渐陷入混乱。
2.2 用什么进行业务治理？ # 业务代码的增长，随后陷入混乱是必然的，这件事是不是让人感到这个问题就无解了。因为不管改多少遍都会陷入混乱，在一个无法解决的问题上人们总是会感觉到无力，从而丧失解决从根本上解决问题的力量。
不要使用上帝类，在DDD中有上帝类的概念。上帝类就是在一个类中解决所有的问题，可以看到MVC模式中的Service就是上帝类的完美代表。所以，不要只用一种模式解决所有的问题。这里给出的都是思考的过程以及方式来解决问题。所以可能会感觉到泛泛之谈。
这里主要思想是DDD，但是经过了一些变形：明确服务边界，定义服务内容，阐述服务关系。具体到代码拆分上：
从业务上划分包：包中的业务是对于特定的业务实体的操作。 定义包的边界：包中的实体发生变化，应该以事件的方式通知其他关心的业务。而不是由本包解决所有的外部问题 明确包与包之间的关系：包中只负责本包该处理的业务，不负责其他业务实体的业务。例如：在下单之后，应该以事件的方式通知仓库，支付，物流等等去做该做的事情。而不是自己去做。 2.3 判断拆分的是否合理？ # 最简单的规则就是单一职责，拆分后的内容是否符合单一职责。然后就是扩展到SOLID规则。
3. 解决域展示 # 实际解决过也是一个不断演化的过程，接受代码会随着时间不断的变化才会接受这种解决方式。
第一阶段：facade模式 # 将facade类作为能力透出类，而拆分出的实际工作类作为业务功能类。例如：策略部署其实可以分为策略定义和策略的使用，就可以使用facade类向外暴露接口能力，然后策略定义一个类，测录使用一个类。
第二阶段：划分领域对象 # 进一步就是就是将拆分出的两个实现类再拆分为：工具类，服务类，外部事件处理类，领域事件类。从名字就可以知道它这些类的意义。
4. 总结 # 业务治理是长期工作，需要理解问题产生的原因才可以真正的解决问题。</description></item><item><title>反驳：每天成长一小点的一年后你将是原来的37-78倍</title><link>https://guowei1651.github.io/essay/%E5%8F%8D%E9%A9%B3%E6%AF%8F%E5%A4%A9%E6%88%90%E9%95%BF%E4%B8%80%E5%B0%8F%E7%82%B9%E7%9A%84%E4%B8%80%E5%B9%B4%E5%90%8E%E4%BD%A0%E5%B0%86%E6%98%AF%E5%8E%9F%E6%9D%A5%E7%9A%8437-78%E5%80%8D/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/essay/%E5%8F%8D%E9%A9%B3%E6%AF%8F%E5%A4%A9%E6%88%90%E9%95%BF%E4%B8%80%E5%B0%8F%E7%82%B9%E7%9A%84%E4%B8%80%E5%B9%B4%E5%90%8E%E4%BD%A0%E5%B0%86%E6%98%AF%E5%8E%9F%E6%9D%A5%E7%9A%8437-78%E5%80%8D/</guid><description>前言： # 本文是2013年2月21日星期四，写的一篇文章。这里其实不是在反驳学习，每个人每时每刻都应该在学习。这里要反驳的是浮躁的做法，不能再劝学的过程中也这么浮躁。这里主要是分析一下为什么用标题中的方式去学习、成长。
原文： # 最近网上流行说：每天成长一小点的一年后你将是原来的37.78倍。很惊人啊，37.78啊。要是谁能天天学习一点就可以称神了。
仔细的想想好像这里面有问题啊！从数学角度看
1.01^365 = 37.78
为啥要365次方。为啥不是
1+0.01*365 = 4.65
先说第一个公式：
1.01^365 = 37.78
这个公式可以理解成每天都是昨天的1.01倍。但是有谁能做到每天都是昨天的1.01倍。别说各行各业的名家大腕，就算是贩夫走卒之类的小人物也不可能每天达成昨天的1.01倍。大家都学过线性代数，将这个算式抽象后得到的公式为： 一看公式，一下子就明白了吧。这个曲线明显的违背了人的认知过程与知识的积累过程。这个过程过就是一个指数曲线。
第二个公式： 这个公式可以理解为每天学会一小点(0.01)，一年就可以学会3.65（1+0.01*365 = 4.65）的知识。这也是很大的进步。再次抽象成线性代数公式：
y = 1 + 0.01*x
斜率很小的一条直线。但是一年下来可以看到很大的进步。
再给出另外一种成长的说法。我之前听过这样的一种说法：一个人在某方面努力了1万小时，那么他就是这方面的专家。如果每天腾出工作时间之外的两个小时用于学习、研究，需要13年你就成为专家。
但是在中国这个浮躁的社会中，你只要比别人多学习1千小时，就会变成牛人。多学习5千小时就变成专家了。所以，不要相信那些每天都必须是昨天的1.01倍，只需要每天学一点终将会成为专家的。</description></item><item><title>方便定制化的企业系统</title><link>https://guowei1651.github.io/essay/%E6%96%B9%E4%BE%BF%E5%AE%9A%E5%88%B6%E5%8C%96%E7%9A%84%E4%BC%81%E4%B8%9A%E7%B3%BB%E7%BB%9F/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/essay/%E6%96%B9%E4%BE%BF%E5%AE%9A%E5%88%B6%E5%8C%96%E7%9A%84%E4%BC%81%E4%B8%9A%E7%B3%BB%E7%BB%9F/</guid><description>Odoo 是一系列开源商业应用程序套装，此套装可满足贵公司的一切应用需求，例如，企业基本的进销存、采购、销售、MRP生产制造、品保质量保障、企业招聘、员工合同、休假、午餐管理、内部论坛、车队管理、内部聊天IM沟通、客诉追溯管理、CRM客户关系管理、VOIP、E-Shop电子商务、网店、企业官方网站，财务会计、银行对账、资产管理、HR工资管理、预算管理、WMS仓库库存管理、POS街边小摊、社区商店、项目管理、条码、PLM等等等。</description></item><item><title>关于Solaris中类似于的Inotify功能</title><link>https://guowei1651.github.io/essay/%E5%85%B3%E4%BA%8Esolaris%E4%B8%AD%E7%B1%BB%E4%BC%BC%E4%BA%8E%E7%9A%84inotify%E5%8A%9F%E8%83%BD/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/essay/%E5%85%B3%E4%BA%8Esolaris%E4%B8%AD%E7%B1%BB%E4%BC%BC%E4%BA%8E%E7%9A%84inotify%E5%8A%9F%E8%83%BD/</guid><description>背景 # 当年的巨无霸一去不复返了啊。在SUN收购Mysql之后，我们还在讨论SUN已经是一个全产业链的超级大公司了。那时的SUN有语言JAVA，有操作系统Solaris，有数据库Mysql，有IDE，有硬件。
原文： # 可以使用http://blogs.sun.com/praks/entry/file_events_notification中介绍的port方法，在用户态监视系统中某个文件(大家都知道*nix中的文件，并不一定真的是文件，可以是目录等等一些东西)。该机制可以监控的事件有：
Watchable events:
FILE_ACCESS /* Monitored file/directory was accessed */ FILE_MODIFIED /* Monitored file/directory was modified */ FILE_ATTRIB /* Monitored file/directory's ATTRIB was changed */ FILE_NOFOLLOW /* flag to indicate not to follow symbolic links */ Exception events - cannot be filtered:
FILE_DELETE /* Monitored file/directory was deleted */ FILE_RENAME_TO /* Monitored file/directory was renamed */ FILE_RENAME_FROM /* Monitored file/directory was renamed */ UNMOUNTED /* Monitored file system got unmounted */ MOUNTEDOVER /* Monitored file/directory was mounted on */ 这些事件类型定义在sys/port.</description></item><item><title>关于智商决定论，情商决定论，认知决定论</title><link>https://guowei1651.github.io/essay/%E5%85%B3%E4%BA%8E%E6%99%BA%E5%95%86%E5%86%B3%E5%AE%9A%E8%AE%BA%E6%83%85%E5%95%86%E5%86%B3%E5%AE%9A%E8%AE%BA%E8%AE%A4%E7%9F%A5%E5%86%B3%E5%AE%9A%E8%AE%BA/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/essay/%E5%85%B3%E4%BA%8E%E6%99%BA%E5%95%86%E5%86%B3%E5%AE%9A%E8%AE%BA%E6%83%85%E5%95%86%E5%86%B3%E5%AE%9A%E8%AE%BA%E8%AE%A4%E7%9F%A5%E5%86%B3%E5%AE%9A%E8%AE%BA/</guid><description>自我救赎系列文章，请参见连接。
背景 # 一个人的特点很多是由后天形成的。就像《人类简史》中所传达出来的一样人类从漫长的升息繁衍中不止把人类的基因副本数不断的增加，还为人类的发展建立了多种多样的文化。并发展出很多各种各样的科技。
在人类社会不断的传承与发展过程中，人们使用文字、语言、图像等来作为知识、科技、文化等的传递媒介。而减少了对于基因信息传递的依赖性，使人类的发展快过基因选择的过程。所以人类从动物中分化出来成为了万物之灵。
而对于个体来说为了满足人类族群对这方面的要求，需要发展出各种各样的能力。慢慢的形成了学习，理解，抽象，分解，判断，分析等等能能力。而这些能力承载正更为高级的知识在历史长河中的不断传递。
而除了这些人们通用的能力外，一个独立的人类个体怎么区分与其他人类个体呢？通过相貌来分辨？通过声音来分辨？通过姓名来分辨？还是通过DNA进行分辨？从人类发展的过程中识别一个个体是通过他们所做的事完成的。而他又是怎么做到这些事情的？这个问题就是我们要讨论的内容。
理论介绍 # 在现今的社会中，人们的智商分布曲线就是一个正态分布图一样（有兴趣的可以在google上搜索IQ Score Distribution）。在绝大多数人的智力都在一个相同的水平时，一个个体智力是人与他人、与社会、与自然建立联系的一种方式。
而在生活、工作、学习过程中持续不断的努力、坚韧不拔的个性。这个就很好的体现了一个人在他的成长过程中的经历以及对于这些经历从心理上发展出来的应对方法。这一点会体现在一个人的情商中。
人们有时候不会理解除了智商和情商之外还有什么？作者认为这里就是人们经常会说的人生观，价值观，世界观，以及三观的所养成的过程、认知方法等。这个其实向上承载着社会的文化，传承着知识。就像我们在学习过程中经常学到的元知识、元认知。
对于作者本人来说，作者不是一元决定论的支持者，作者是多元决定论的支持者。
情商决定论 # 网上非常流行的一段话（但是找不到这段话的出处）：
在人的成功的诸多主观上的因素里面，智商（IQ）因素大约占20%，而情商（EQ）则占80%左右。 这个结论和作者在上面的描述有着一些联系，在智商同质化的社会中怎样培养出一个差异化竞争就成了选择。而情商就成了这个选择。这是情商决定论的坚决支持者们所推崇的说法。这其实和浮躁的社会有着不小的关系，认为所有人都可以做所有事。那要专家做什么？
智商决定论 # 前几年闹得沸沸扬扬的“上清华靠智商”，《寒门再难出贵子》都是对于智商决定论的一种讨论。而且根据上面所说的人类智商分布是正态分布。
认知决定论 # 认知水平是站在前人的肩膀上的。有了先哲、有了之前的科学家、有了你的父母才有这么认知水平高的社会。而且认知水平在中国是通过人们的言传身教才发现的。没有像教科书中的那样知识。
它的一个延伸是知识决定论，知识决定个人高度，知识决定个人发展。而认知是指人们获得知识或应用知识的过程，或信息加工的过程，这是人的最基本的心理过程。它是更广泛的一种心理过程。
举一个例子：前几天在看《清教徒的礼物》时，发现这本书中所描述的世界、社会、人都太过于理想化，太过于世外桃源。在现实中会遇到各种各样的问题，以至于无法实施。后来隔了几天才慢慢的反应过来，这本书的描述是以美国社会为基础的。是有一定事实依据的，在这个事实依据的情况下进行了抽象和提炼。我只能是从某个侧面承认我对于社会、对于人性、对于自己的认知还是处于很低的水平。
人生三元论 # 组成人类的每一个个体的认知水平、智商水平、情商水平，都影响着整个人类社会的水平。也影响着整个社会的科技技术水平。
上面说了情商，智商，认知的三种决定论。也举了例子，其实从某些角度来看认知决定论是我比较推崇的。像孟母三迁一样，就是为了改变孟子的环境、影响孟子认知体系。但是，真正的做成一件事不知要其中的一项，要三项都兼顾才可以。
情商决定什么？（决心、信心） # 情商确定做事的决心，不屈不挠的能力。它可以保证人们在做事时的决心与信心。决定着是否可以坚持着把一件事做好，做成。
智商决定什么？（怎么做） # 指人认识、理解客观事物并运用知识、经验等解决问题的能力，包括记忆、观察、想象、思考、判断等。这个能力包括以下几点：理解、判断、解决问题、抽象思维、表达意念以及语言和学习的能力。 智力包括多个方面，如观察力、记忆力、想象力、分析判断能力、思维能力、应变能力等。智力的高低通常用智力商数来表示，是用以标示智力发展水平。
认知决定什么？（做什么） # 认知决定了经验，方法，规范。它最终决定着一个人可以做哪些事。这个跟个人的经历，个人知识体系，个人认知体系都有着息息相关。想现在的知识决定论其实就是认知决定论的一种延伸。 作为在知识密集行业的从业者来说，情商、智商都会进入同质化的阶段，而自己努力提升的特定行业认知就变成了决胜资本。
例子： # 沟通 # 跟处在不同认知水平的人进行沟通时，会遇到各种各样的问题。在对于一件事有更好认知的人那里所有的事情都是可以完成的，而对于不好的认知的人会提出各种反对一件。例如：很多人认为AI是一个高大上的内容，其实现在的AI已经普及化，廉价化了。所有的人都可以看懂，都可以学习。
认为态度能替代方法 # 有些人认为态度可以确定一切。这就是典型的情商决定论，不过从中国的历史看就可以得出态度再好也不能阻挡王朝的灭亡。然而现代还是有很多没有认知的人认为方法可以被态度替代。你需要表现的态度很好但是，不通过方法来管理自己的工作内容。就会发现成为一个行业内多年前。
合作 # 人都是社会群体中的一个，团队都是社会中的一个，国家都是世界中的一个。不同的个体间关系就两种：合作与对抗。每一个人
关于禁止思考的思考 # 对于软件团队应该建立为一个学习型组织是业界公认的一种实践模式。而对于这种实践模式的执行情况可能就没有那么好了。因为团队会被迫与各种问题，团队人员的平均认知水平，TL对于学习型组织的认知，业务对于团队维护所做的干扰等。
应用 # 《清教徒的礼物》从某种角度上解决了《人性本善，人性本恶》的问题。清教徒相信人性本恶的基本认知，然后在这个基础上通过智商的分析，判断能力进行了各种各样的实践。并用不屈不挠的精神与原教派进行抗衡。
动机论：出于什么样的目的进行自我提升？在人们情商和智商都同质化的基础上对于认知的深入才能真正的提升自我。
不患人之不己知，患不知人也。&amp;ndash;《论语·学而》
总结 # 贫穷的本质说明了一件事，人们对于知识的认知存在不同而造成的贫富差距。在不同的层面上体现出认知，智商，情商的统一作用。在面对压力的时候，不同的应对方式决定了人生的高度。
参考 # 智力 认知 贫穷的本质 胡星斗：大陆中国人像“迷失的狗”？——评美国兰德公司对中国人的评价 用一年时间,彻底提升自己的好工具！【01】</description></item><item><title>基础设施中浮躁的心理</title><link>https://guowei1651.github.io/essay/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E4%B8%AD%E6%B5%AE%E8%BA%81%E7%9A%84%E5%BF%83%E7%90%86/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/essay/%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E4%B8%AD%E6%B5%AE%E8%BA%81%E7%9A%84%E5%BF%83%E7%90%86/</guid><description>浮躁的时代下，一位老工程师的肺腑之言
1、最让人痛心的是技术人才的流失 2、全民浮躁，如何制造业立国？ 3、工程师何时能够成为一份体面的工作？ 4、工作十几年做工程师赚的钱，只有房产升值的零头 5、互联网经济只是手段，不是目的 6、核心技术的缺乏早晚要吃大亏
怎样克服浮躁心理（转）
【浮躁产生的三点原因】 1.高科技和信息产业的发展导致人们浮躁心态。因为高科技枪挑一个快字，人们不能再像过去一样，一壶酒，几碟菜，海阔天空地聊天，神游。人们追求速度，效率和解决方法的捷径。在追求这些的同时，人们往往忽略了耐心和等待，甚至不惜代价地投机。最后，人与人之间的交流变少，变得越来越自我和独立，而造成了一定程度上人与人之间的不和谐因素，笼统归为浮躁的心态所致。 2.激烈的竞争与工作压力。如果说高科技只是一个间接原因，一个诱因。那压力与竞争便是浮躁的直接原因。竞争促使优化，优化意味着给个人更多的要求。人们不能坐以待毙，不能守株待兔，不能坐享其成，凡是都要靠自己的双手去争取，去获得。这是个很现实的问题。所以，冷漠也好，残酷也罢，都是浮躁的心态所导致的不良后果。 3.畸形的快餐文化。太多理财投资类书，太少净化心灵的读物。动不动畅销读物，排行榜，音乐小说。用新奇的标题，离奇的情节，夸张的形式，眩目的色彩夺取本已无太多抵抗力的人们。人们在物欲涌动的今天，人们对这些快餐文化变得束手无策，只能选择默默的接受。
【怎样克服浮躁心理】 “浮躁”指轻浮，做事无恒心，见异思迁，不安分守己，总想投机取巧，成天无所事事，脾气大。浮躁是一种病态心理表现，其特点有： 1．心神不宁。面对急剧变化的社会，不知所为，心中无底，恐慌得很，对前途毫无信心。 2．焦躁不安。在情绪上表现出一种急躁心态，急功近利。在与他人的攀比之中，更显出一种焦虑不安的心。 3．盲动冒险。由于集中不安，情绪取代理智，使得行动具有盲目性。行动之前缺乏思考，只要能赚到钱违法乱纪的事情都会去做。这种病态心理也是当前违纪犯罪事件增多的一个主观原因。
中国的制造业真的浮躁吗？如果是那是什么原因造成的？
我想了几天这个问题，觉得要看“浮躁”的定义。“躁”的意思是：心里有众多的东西要动，而“浮”的意思是“漂流”，两个字组合在一起的意思就是“心里有众多的东西要动，而又没有地方可以让他们落脚，因此到处飘荡不得安心”在当今中国市场经济的大背景下，很少人能按耐住自己一颗驿动的心，守住自己可贵的孤独与寂寞，而变得越发盲目，急躁，和一定程度上的急功近利。急功近利更加接近我想要表达的。
原因： # 民族性原因： # 似乎踏实，仔细，认真，一丝不苟这些词，似乎从来不会用于我们中华民族。现在很多人想赚快钱，想发家致富，想房子车子老婆孩子。就是没有人想想自己的梦想，想想有什么东西值得自己为之奋斗。做基础制造业，如机床，材料等，必须砸大钱，熬时间，才会出大成果的。我们太短视了，没有人愿意潜心做这些事情。而且做这些基础产业，骗不了人，只有靠踏踏实实，一步一步，认认真真做出来。没有投机取巧的余地，我们就不去做了。
社会原因： # 自从有了核武器，这种一个国家摁个摁钮就可以毁灭地球东西以后，我不太相信世界大战还能打起了。既然打不起来，基础设施靠买卖就可以得到了。当权者自然不必考虑投资基础。做好一个机床，跟开发出个CPU，哪个更能忽悠百姓？再说上台干个十年就下去了，投资基础产业这种前人种树，后人乘凉的事情有什么好处。况且没有第二个DANG，或者第二个权利中心对我监督。
希望中国每个工人，每个工程师，都把尽善尽美放在心上。至少我，在设计任何东西时，对每个参数，我都会问一下：为什么要选这个参数，会不会有更好的选择？
你体内的情绪垃圾已超过90%，请及时清除 你是如何被『跳出舒适区』毁掉的？</description></item><item><title>00 目录</title><link>https://guowei1651.github.io/essay/directory/</link><pubDate>Sat, 22 Apr 2023 13:03:02 +0800</pubDate><guid>https://guowei1651.github.io/essay/directory/</guid><description/></item><item><title/><link>https://guowei1651.github.io/essay/cto%E6%8A%80%E8%83%BD/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guowei1651.github.io/essay/cto%E6%8A%80%E8%83%BD/</guid><description>CTO 技能图谱</description></item><item><title/><link>https://guowei1651.github.io/essay/java%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guowei1651.github.io/essay/java%E5%9F%BA%E7%A1%80%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</guid><description>面试问我 Java 逃逸分析，瞬间被秒杀了。。
浅谈HotSpot逃逸分析 面试官问我：你确定JVM堆内存是共享的？ 不为人知的jvm编译优化技术，只有你知道 JVM&amp;ndash;字节码与执行引擎 JVM进阶之路， 不然又要被面试官吊打了
Docker中的Java内存消耗优化以及我们如何使用Spring Boot
来来来，聊聊7种内存泄露场景和13种解决方案</description></item></channel></rss>