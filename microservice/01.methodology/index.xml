<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>01. 微服务方法论 on</title><link>https://doks.netlify.app/microservice/01.methodology/</link><description>Recent content in 01. 微服务方法论 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://doks.netlify.app/microservice/01.methodology/index.xml" rel="self" type="application/rss+xml"/><item><title>00 微服务方法论</title><link>https://doks.netlify.app/microservice/01.methodology/00%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95%E8%AE%BA/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/00%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%96%B9%E6%B3%95%E8%AE%BA/</guid><description>0. 思想 # 在接收到一个新的新项目时，架构师的职责是建立项目的业务与技术实现之间的桥梁。在翻译业务到技术实现的过程中需要进行业务建模、技术设计等方面的工作。业务建模和技术设计过程中都有各自领域的知识体系。基本上每个知识体系都是由上层的理论、概念和方法论的提供方向上的支撑，由下层的实施方法、实施工具进行具体工作的实施。
在微服务实践系列文章中主要介绍在微服务实践过程中可能会考虑到的方向、以及这些方向可供选择的技术工具、并会涉及少量的架构设计理论知识。而在架构设计系列文章中会介绍架构理论、架构设计实践、以及架构设计中的分析与评估方法。
因为本系列文章主要介绍的是技术工具的内容，就会根据技术工具的特性进行介绍。不过本系列文章中不会像网络上其他的技术文章一样以某项技术为维度进行文章编写。而更像书本以技术的维度进行整理。以这种方式一方面是符合了我们的【实践】题目，便于在实践过程中使用技术工具组织整体架构。另一方面以技术方向而不是某一个技术实现，也是以一种自顶向下的思维方式进行说明（软件研发人员一般会使用自底向上的视为方式）。
1. 技术方向 # 对于微服务中技术的全局中可能会有很多门技术需要学习与掌握。这里以一张图的方式为大家展示可能在微服务中遇到的技术与实现方向：
作者把微服务实践中的技术方向有分了四部分：微服务管理，存储技术，业务支持，DevOps。微服务管理是介绍分布式系统的技术实现部分。存储技术独立出来的意义在于存储和大数据，人工智能等大型的独立系统有关系。业务支持是阐述在业务实现过程中可能会用到的技术，但是不和通用的微服务技术相关的技术。DevOps是在微服务设计和敏捷的提倡下需要接受一切自动化的方式。 上图中的浅绿色部分，是说明所有的技术方向。之后所有的文章都会按照这个规范进行编写。右侧每一列都是一项技术实现，这些技术实现可能会涵盖不同的技术方向。所以，这里也会在下面的文章中在不同的技术方向上推荐不同的实现技术。例如：做数据库与缓存同步的工具可选范围不多的情况，我就只能推荐Gearman。
从图中可以看到微服务技术关注的大概方向，基本上整理出来五个大方向。并在五个大方向上有相关的具体技术方向进行补充。现在基本上就缺具体的实现技术选型：
1.1 微服务管理 # 内容发布 CDN，分布式存储等 远程过程调用 RPC，RMI，JMS，AMQP， 服务发现 DNS，zookeeper，spring eureka，spring consul，ETCD，REDIS 服务注册 DDNS，zookeeper，spring eureka，spring consul 网关 Zuul，Kong，Nginx Plus，OpenResty，Spring Cloud Gateway 负载均衡 LVS，Nginx，F5 高可用 Haproxy，keepalive 服务编排 Netflix Conductor，uber/cadence，zeebe-io/zeebe，ing-bank/baker，Spring Cloud Zuul, Node-RED，ApiConfig 统一配置 Spring Config，ctripcorp/apollo: Apollo，git，nginx，Consul，Netflix Archaius 分布式任务管理 xxl-job,Elastic-Job， 异步任务 AMQP，Spring Cloud，Dubbo 高速缓存 Redis，Memcache，Mysql Memory DB，H2 前后端分离 Swagger，API Gateway 服务降级 Dubbo，Spring Cloud Hystrix 服务限流 Dubbo，Spring Cloud Hystrix 服务熔断 Dubbo，Spring Cloud Hystrix 故障恢复 Docker，Swarm，K8s 微服务治理 OpenSergo，Polaris 事务管理 sage，fescar，gts，Narayana 动态选举 zookeeper 用户 用户认证，权限管理，用户计费，会话管理 OpenAPI Kong，APIgee 对象存储 minio，riakcs（亚马逊S3技术），ceph 事件驱动 EventBus， spring event 并发处理 akka，Actor 全局唯一性编码 UUID，SetNX，雪花算法， 规则引擎 Drools 1.</description></item><item><title>01 微服务落地事项</title><link>https://doks.netlify.app/microservice/01.methodology/01%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%90%BD%E5%9C%B0%E4%BA%8B%E9%A1%B9/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/01%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%90%BD%E5%9C%B0%E4%BA%8B%E9%A1%B9/</guid><description>0. 背景 # 现在大家都在提微服务，但是有几个人想过怎么在公司级别怎么进行微服务落地呢？康威定律怎么处理呢？这里大概总结出一个微服务落地实施时需要考虑哪些内容。
第一部分：服务平台，发展远景。可以参照TOGAF的制定企业数字化方案制定方法，进行制定。 第二部分：服务平台，构建过程。设计在实施过程中的各种平台级问题。 第三部分：服务设计，划分方法。中台中的服务设计，服务验证方法。在这里也需要评审方法评审中台服务是否可行。 第四部分：开发 测试 运维。微服务具体开发，测试，运维过程中所涉及的问题。
以下为具体实施过程中需要哪些操作项目，以方便之后的实施：
1. 中台服务评审机构规范：（管理方式，需求方式） # 1&amp;gt; 评审机构 1) 评审机构组成（参加人员，投票权等） 2) 评审决策规范（服务加入规范） 3) 会议与决策组织形式（会议议程、评审机构内知识共享形式等） 2&amp;gt; 微服务规范： 1) 服务拆分、加入规范 2) API发布、管理、使用规范 3) 非功能性规范（性能，稳定性，可靠性，机器申请） 4) 测试规范（测试方案，测试内容，测试工具） 5) 遗留系统迁移规范 6) 微服务文档管理规范（每个微服务都需要有文档） 3&amp;gt; 需求管理： 1) 公司对服务中台的终极目标：销售倾向？内部管理倾向？供应链管理倾向？全产业链倾向？ 2) 具体业务需求与终极目标产生冲突之后，怎样操作？（只需要规范） 3) 中台服务评审机构需要评审项目是否可以立项。 2. 设计规范：（设计方式） # 1&amp;gt; 服务拆分规范。 2&amp;gt; 设计中应该包括：逻辑视图，进程视图，部署视图，开发视图，业务场景。以上描述系统的不同部分。 3&amp;gt; 设计中需要考虑：功能，性能，稳定性，可靠性，实现难易度等。 3. 技术实施：（开发方式） # 0&amp;gt; 业务服务： 1) 业务服务划分？服务边界？服务间关系？ 1&amp;gt; 开发技术： 1) 运行环境中的JRE版本为？运行环境中的WEB容器为？使用过程中数据库相关配置是否使用JNDI？ 2) 微服务主体框架？ 3) 服务治理？服务注册与发现机制？故障恢复机制？限流？ 4) 存储？无结构存储（文件存储形式，文件发布形式）、半结构存储（高速缓存，NoSql）、结构化存储（数据库，数据库中间件）。 5) 数据库设计？数据库设计规范？数据库设计文档？数据库物理结构设计？ 6) 通信？消息中间件？RPC方式？Restful规范？ 7) 日志集中管理？日志规范？日志收集、存储、分析？ 8) 负载均衡？四层负载均衡还是七层负载均衡？服务间调用是否进行负载均衡？ 9) 服务监控？服务的监控方式？消息跟踪机制（APM）？ 10) 全局唯一性编码规范？ 11) 分布式任务管理？ 12) 是否有持续集成，持续交付环境？ 13) Session共享？认证方式？第三方认证问题？ 14) 安全，数据交换时是否对数据加密？数据存储是否对数据加密？数据权限控制？组织权限控制？ 15) 其他服务（VOD，CDN等）是否使用阿里云服务？ 2&amp;gt; 运行环境： 1) 是否可以在阿里云上进行测试环境测试？ 2) 预生产环境与正式环境之间是否有差异？ 3) 运行环境部署情况？以及部署方式EDAS？裸机部署？K8S部署？部署文档？部署目录？ 3&amp;gt; 测试过程： 1) 对独立服务是否进行测试？ 2) 交叉流程是否进行测试？ 3) 测试规范？以及测试流程？测试执行情况？ 4&amp;gt; 交付流程： 1) 验收规范？主测试流程？验收测试？自动化回归测试？ 2) 需要&amp;quot;中台服务评审机构&amp;quot;，对项目完成度，完成质量进行评审。 5&amp;gt; 协作方式： 1) 团队间协作方式的定义？团队间知识共享方式？ 2) 供应商与公司之间的协作方式？沟通方式？ 4.</description></item><item><title>02 服务划分规则 00 介绍</title><link>https://doks.netlify.app/microservice/01.methodology/02%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E8%A7%84%E5%88%9900-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/02%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E8%A7%84%E5%88%9900-%E4%BB%8B%E7%BB%8D/</guid><description>0. 背景 # 现在微服务比较流程，那么对于微服务的拆分方法也比较让人困惑。本文从不同的角度切入后以系统的、全面的、统一的方式为各位介绍服务拆分的问题。
1. 问题定义 # 1.0 服务划分具体的问题在哪里？ # 服务划分是对于具体技术的选择？ 是选择使用纵向切割的方式，还是使用横向切割的方式将业务切割开。这个切割方式是不是有效，直接对于业务切割是否能够满足其他方面的要求。都是需要考虑的。 还是在实现过程中遇到的服务聚合的问题？ 很多人对于OO的理解都没有深入就开始抽象服务，这些人对于SOLID的追求，还是对于KISS，DRY的追求？在追逐这些的同时反模式的考量在哪里？ 还是在架构层面管理可用、可靠？ 架构层面的要求不止是可用、可靠。还有对于安全，对于可扩展性的要求。对于服务划分这个任务是否需要满足？ 还是在于对业务模型的确认？ 对于业务模型的验证是需要越快越好的。我们是否可以在服务拆分的过程中就将业务模型验证了？ 还是在于业务团队之间的合作是否有效？ 团队之间是否会产生相互推诿的问题，是否是因为工作责任未定义明确。根据康威定律这是在所难免的，出现这样的问题要不修改组织结构，要不修改技术架构。 新业务加入的是否怎样拆分？ 对于新业务加入是使用流程的方式加入？还是使用业务聚合的方式加入？还是使用其他的方式加入？在我们整体的服务拆分策略里都是需要考虑的。 还是在于企业的发展规划？ 企业需要发展，企业需要降低成本，企业需要加快发展速度，企业需要吸引更多的客户。 1.1 问题需要全面、统一的看待 # 从上面可以看到服务拆分并不是一个问题，而是一个复杂的领域。这个领域内需要通盘考虑的问题比较多，所以就会涉及到不同层面的划分方法。并且这里还会涉及到静态划分规则和动态划分规则的问题。所以，这里先将问题分类，在针对问题做解决域的考虑。
静态划分解决方案
公司战略层面 业务管理层面 技术架构层面 具体实现层面 动态划分解决方案 微服务在演进过程中会遇到的问题，以及解决他们的办法。
2. 问题解决 # 在一个业务是否应该放在某一个特定的服务上
2.0 几条大原则： # 解决问题的三种办法：抽象，分解，知识。 全局、系统的考虑问题。 站在全局的层面思考与解决问题。 服务中心一定是不断发展的。 随着业务的不断发展，服务中心会不断的演进。技术架构设计不是一劳永逸的。 服务中心中的服务形态多样性。 成为业务的服务，成为工具的服务，成为数据的服务等。 服务中心可以演变为服务群。 一个服务可以逐渐的演变为一个独立的业务形态，独立的业务群。 2.1 静态划分解决方案 # 公司战略层面 每一个服务都是一种能力或多种能力的提供，可以赋能给更前端的应用系统。**使用大中台的概念控制公司的战略层面的划分规则。**使用这样的结构固化企业的核心业务，使其真正的成为企业的核心。并为创新提供可能。并使用最技术的层面去解决与竞品之间竞争的问题。 业务管理层面 企业的业务是经过多个层次，逐渐的进行流转的。所以，一个业务可以看成是一个业务流。对于这个业务流中所涉及到的服务为我们服务体系中的服务。而不是某一个业务流就是我们中台，前台，后台中的服务。下图中是阿里体系中的业务流程。这些业务流程设计到纵向的内容就可以拆分成一个个独立的服务。 业务的组织形式辐射的形式发散出去。使用业务模型的方法去建立业务层面的服务拆分。针对业务域中的角色，功能进行拆分。在业务规划层面使用ToGaf的架构设计方法AMD去完成企业数字化的设计。
技术架构层面 很多人认为微服务拆分就是技术的事情。其实在这个过程中上下游的工作形式，工作方法都与技术服务的拆分工作密切相关。在技术层面使用微服务的4个设计原则和19个解决方案+DDD+架构模式+技术考量等等组合成为技术架构层面的拆分规则。 具体实现层面 在具体的实现层面需要考虑的就是服务是否可以达到数据一致性原则，CAP原则，BASE原则。
2.2 动态划分解决方案 # 演进的过程与决策的过程。服务中心是需要业务不断的滋养才可以形成。但是需要定义规则进行相关的设计与实现。在动态划分的方面是需要有决策组织进行帮助决策的。例如在一个新的业务线加入到平台中时，需要有决策组去决策是否可以把新业务线加入到平台中。
另外一方面是针对遗留系统的改造。对于遗留系统的改造部分可以参见微服务架构与实践 第二版中的说明进行。
3. 总结 # 4.</description></item><item><title>02 服务划分规则 01 方法</title><link>https://doks.netlify.app/microservice/01.methodology/02%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E8%A7%84%E5%88%9901-%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/02%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E8%A7%84%E5%88%9901-%E6%96%B9%E6%B3%95/</guid><description>0. 背景 # 参考 # 基于 DDD 的微服务设计和开发实战
DDD 和微服务之间是什么关系？
可落地的DDD(4)-如何利用DDD进行微服务的划分(2)
可落地的DDD(3)-如何利用DDD进行微服务的划分
一个微服务+DDD(领域驱动设计)的代码结构示例
领域驱动设计: 服务边界划分
干货总结：如何使用DDD指导微服务拆分？
当中台遇上DDD，我们该如何设计微服务？
DDD领域驱动设计指导微服务实践</description></item><item><title>02 服务划分规则 02 实践</title><link>https://doks.netlify.app/microservice/01.methodology/02%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E8%A7%84%E5%88%9902-%E5%AE%9E%E8%B7%B5/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/02%E6%9C%8D%E5%8A%A1%E5%88%92%E5%88%86%E8%A7%84%E5%88%9902-%E5%AE%9E%E8%B7%B5/</guid><description>0. 背景 # 0.0 拆分与控制的关系 # 微服务的边界在服务划分的方法中进行说明，拆分出服务之后需要对服务进行管理和控制。服务之间的关系以及调用链的控制不会在服务拆分中进行说明。所以这里主要讨论的是服务之间的关系。
0.1 管理服务之间关系的实践方法 # 其实业界也有很多方法论可以用来管理服务之间的关系，例如：可以用DDD中的限界上下文映射可以作为服务间关系的理论基础，也可以用AKF中的Y轴的按照功能进行切割，也可以用分层架构中的层次来管理服务之间的关系。
下面主要讨论两种管理服务之间关系的方式：
分层模式 以定义层次意义的方式将服务划分到不同的层次中。服务落到层次中之后就可以以层次关系来定义服务之间的关系。 分群模式 以服务群的边界定义，使用多个服务组合成一个服务群。以群的边界关系定义服务之间的关系。 1. 分层模式（中台） # 1.0 概念 # 在架构风格中有分层架构风格，在DDD中也有分层模型。分层模式是应用各种场景最直接，也是最容易上手的方式。就像在0.2中说的那样，只要定义清楚分层中每一层的作用即可定义服务之间的关系。
可以以自上而下的设计方法：对层的责任进行定义，然后在定义服务。也可以先进性服务拆分，然后根据服务所提供的内能力在进行分层。例子中可以看出这两种方式的区别。
1.1 例子 # DDD分层架构 DDD分层架构并不是只指DDD定义的分层，也可以是DDD分层引申出的六边形架构，洋葱架构，清晰架构等等。他们都有一个特点是以先结论后细节的方式对层次进行划分。每一层都是下层的一个总结流程，每一层都是上层的能力的提供。
中台 中台模式是以中台能力为核心的。但是在建设过程中不可能知道哪些能力是需要中台进行承载的。所以，中台是一个对前台和后台提供能力的一个部分，但是它的建设过程是需要不断的抽象与总结来形成中台能力的。
1.2 特点 # 公用能力 每一层都是向上层提供能力的。所以，下层的服务能力对于上层来说就是公用的。
纵向切割的分层模式 分层几乎都是从上之下，或者从下至上的。
有明确的层与层的依赖关系 上下层之间关系明确，下层向上层提供服务。不允许下层调用上层
未对同层中的服务的能力进行规范 粗粒度的服务，细粒度的服务都在同一个层中。如果服务较多时可能分不清服务之间的划分原则。
故障隔离的方式使用调用链隔离的方式进行隔离 使用上下层调用链的方式进行隔离。
1.3 总结 # 有点很明显，简单易上手并且公共能力提供比较好。缺点也很明显，服务一多之后就很难管理了。
2. 分群模式（子系统） # 2.0 概念 # 以贴合团队管理的方式进行服务的划分工作，这里就可以很好的服务康威定律和逆康威定律。一个团队负责整体系统中的一部分业务，而业务与业务之间有着天然的隔离能力。
2.1 例子 # openstack中的分群 在openstack的架构中很容易就可以看到，每一个部分是由一群服务来完成的。有专门对外提供能力的，有专门处理业务的，有负责存储的。这一群服务来完成一个业务模块。 2.2 特点 # 隔离性强 将所有非本群中的服务都认为是第二方服务。然后以管理第二方的方式对外进行管理工作。这样故障基本上就可以隔离在服务群内部。
服务群之间的业务边界明显 服务群之间的业务是有着明显的边界的，如果边界模糊或边界不清晰就可以将两个团队合并。但在分层模式中很难进行层次之间的合并。
服务群管理可以交给一个团队完成 服务群可以更贴近业务的方式对服务进行划分，所以，业务相近的服务交给一个团队比较合适。
无法很好的定义服务群之间的协作关系 具体是服务群A给服务群B提供基础能力，还是服务群B向服务群A提供业务能力。很难进行定义。但在分层中，层次关系就定义了能力的提供方向。</description></item><item><title>03 持续改进微服务</title><link>https://doks.netlify.app/microservice/01.methodology/03%E6%8C%81%E7%BB%AD%E6%94%B9%E8%BF%9B%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/03%E6%8C%81%E7%BB%AD%E6%94%B9%E8%BF%9B%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid><description>公司构建大中台之后的事情。
背景： # 在作者的0.微服务方法论-1.微服务落地事项、04.软件产品公司竞争力、05.为什么公司都在提大中台？等文章中提到了很多关于公司怎样认识、理解与微服务微服务。在人的认知是需要过程的不可能一次就对一项事物深入的理解。所以，对于微服务中不只有前面的优点、可行性等方面。它其实是对人的认知的一种挑战。
微服务是一种持续演进的模式。&amp;ndash;演进式架构
微服务是一直在变化的。这也是微服务的一大特点，可以为业务提供很强的创新能力。那微服务具体会像那个方向变化？变化过程中会遇到怎样的问题？接下来我们就讨论这部分内容。
变化： # 在学物理的时候，都会对运动有一种基本认识：运动是绝对的，静止是相对的。在软件行业也需要有这种方式，例如：需求有专门管理需求变更的方法、软件过程管理在不断的发展、技术在不断的升级等等。相对于前面的变化来说，对于一个互联网产品公司所关注的业务形态、盈利模式、客户特征、运营指标等等。
对于互联网产品公司的怎样快速满足业务形态变化，适应盈利模式的叠加，适应各种类型的客户特征就成为重中之重。那对于需求，过程，技术，运维需要做才能适应这种高度不确定的办法。
在VUCA时代，指导我们在这个时代的做事方式。需要全局性，前瞻性的思维模式考虑怎样适应多变的世界。微服务就是能够更好的适应多变的情况。下面以构建、变化、适应的方式说明适应方式。
构建 # 构建过程是产品最开始构建基础设施的过程。这个时候会做大量的分析、设计工作、管理规范等等。以这些思考，规范等内容指导之后的产品过程。所以就显得这个过程很重要。这个过程为之后奠定产品发展的基础，这里针对需求管理，过程管理，技术选型等的思考可能会影响整个公司声明周期。
在这样的前提下公司起步阶段是非常重要的一个阶段，需要公司管理者有能力制定各种规范与抉择。针对于其他方面的管理工作会在之后的文章中进行讨论。这里我们讨论技术方面的内容：
编号 具体规范 内容 说明 1 工程规范 1.项目规范，项目中代码管理、配置管理、编译方法
2.测试规范，故障率规范、自动化测试规范
3.UI设计规范，规范色调、操作设计、布局规范等 主要是管理产品过程的 2 实施规范 1.技术选型规范
2.工作量评估规范 统一技术，管理公司内部的技术技术栈 3 运维规范 1.容量规划
2.安全规划
3.部署规划
4.升级方法
5.可用性规划等 规范运维，避免运维不稳定性 4 运营规范 1.指标规范
2.规范分析方法 规范化产品运营过程 技术规范 技术方面的选型影响者之后系统的可扩展性，伸缩性，可用性等内容。所以，现在大部分公司在开始构建自己的系统的时候都会直接考虑微服务模式，并配合各种架构模式构建。技术选型方面就参照现在流行的几个技术栈就好。整体技术规划有了，技术选型也有了之后最大的问题就在于工程规范方面。
工程规范 工程规范方面的一个问题在于怎样规划产品整体。以怎样的微服务的划分规则？怎样规划产品的核心服务层？第三方接入规范？等等都是需要考虑的内容。其实大中台已经为我们提供了很多思路。而这里要讨论的更多的是第三方的定义和第三方的技术规范。
怎么定义第三方？所有除核心系统之外的系统都是第三方？还是只有外部的系统需要接入时才叫第三方？跟第三方之间的技术规范，行为规范怎么定义？
这里可以先把问题留在这里，我们以逐步推进的方式解决这几个问题。
变化 # 随着业务的发展和人们对行业、对业务的认识的逐渐深入，人们会对业务进行重新设计与重新规划。这是一种内部产生变化的需求。还有一种是外部产生变更的情况，外部认为对接公司产品有意义，值得付出时会进行第三方对接。
针对第一种变化，如果是业务形态发生了变化，那么接受业务的变更到核心服务群中即可。针对内部需求变化还有另外一种比较难处理的。就是在业务逐渐的发展之后，原先业务稳定发展，并能持续进入盈利。现在需要发展出新的业务增长点以支撑公司盈利的持续增长。这个时候就需要构建新的系统。
那如果是发展出新的业务，新的业务的技术微服务怎样管理？直接加入的系统基础服务中？另起系统重新管理？这里就带来了变化。这里也把问题遗留下来，下面一起解决。
适应 # 上面提到了几个问题：
怎么定义第三方？ 与第三方之间的技术对接怎样完成？第三方接口的行为规范怎么定义？ 新业务的微服务要加到核心服务群中吗？ 适应就是为了在系统遇到各种各样的问题时，怎样让系统适配这些情况。这些处理策略就是我们的工程规范。这里阐述几个观点，说明作者对于这几个问题的基本思考：
核心微服务系统群必须是稳定，有完整的运维规范，优化规范。 核心微服务系统群只提供基本功能。不提供与业务有任何关系的服务。 核心微服务系统群必须能够支持业务的不断扩展。必须提供相关的服务接口或SDK等。 核心微服务系统群应是独立管理与部署的。核心微服务不受外部系统的干扰。 上面提到的核心微服务系统群的概念，可以参加大中台的概念。但是它是更倾向于稳定，通用性的业务。它是经过高度抽象并提供原子操作的核心系统，就像微内核系统中内核。外部的所有内容都是以插件的形式插入到系统中。
在本系列前面的一篇文章【0.微服务方法论-1.微服务落地事项】中大概整理了公司构建微服务时需要考虑的内容。也需要考虑核心微服务群的持续改进过程。所以，核心微服务既需要满足不断扩展的需要，又要满足稳定可靠的要求。那怎么满足即变化又稳定的要求呢？解决上面提到的三个问题就可以解决这个问题。
怎么定义第三方？ 在核心服务群外的平台、系统、服务都是第三方系统。这样其他系统的建设不会影响核心微服务群。可以保证核心微服务群的稳定。</description></item><item><title>04 微服务实施过程</title><link>https://doks.netlify.app/microservice/01.methodology/04%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%96%BD%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/04%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%96%BD%E8%BF%87%E7%A8%8B/</guid><description>参考 # 什么是精益创业以及其核心原则
精益创业的5项基本原则
《精益创业》读书笔记</description></item><item><title>05 演进</title><link>https://doks.netlify.app/microservice/01.methodology/05%E6%BC%94%E8%BF%9B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/05%E6%BC%94%E8%BF%9B/</guid><description>参考 # 教你从单体架构一步一步改为微服务
转型微服务架构完整实施方案</description></item><item><title>06 服务抽象与持续加入</title><link>https://doks.netlify.app/microservice/01.methodology/06%E6%9C%8D%E5%8A%A1%E6%8A%BD%E8%B1%A1%E4%B8%8E%E6%8C%81%E7%BB%AD%E5%8A%A0%E5%85%A5/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/06%E6%9C%8D%E5%8A%A1%E6%8A%BD%E8%B1%A1%E4%B8%8E%E6%8C%81%E7%BB%AD%E5%8A%A0%E5%85%A5/</guid><description>核心服务群建成之后，新业务的内容怎样加入的核心服务群中。
参考 # 微服务的4个设计原则和19个解决方案</description></item><item><title>07 服务治理</title><link>https://doks.netlify.app/microservice/01.methodology/07%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/microservice/01.methodology/07%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</guid><description>参考 # 如何构建一个有效的服务治理平台</description></item></channel></rss>