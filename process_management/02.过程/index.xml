<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02 过程 on</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/</link><description>Recent content in 02 过程 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>01 迭代为什么叫冲刺(sprint)？</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/01-%E8%BF%AD%E4%BB%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AB%E5%86%B2%E5%88%BAsprint/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/01-%E8%BF%AD%E4%BB%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AB%E5%86%B2%E5%88%BAsprint/</guid><description>0. 背景 # 上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑不足以为道。&amp;ndash;《道德经》
之前听到、看到、用到敏捷的时候就直接根据其中的敏捷规范、规则进行实践。遵循了：勤而行之规则。软件工程从原始的作坊式工作方式，到现代化的敏捷工作方式在这个过程中经过了哪些思考、哪些方案的试探、在不断地尝试与改善后才走到现代化的工程过程。深入的体会在升级的道路上经历了哪些挑战，针对这些挑战做了哪些方案对于真正的践行敏捷工作方式有着深入的指导意义。这里对比一下作坊式的过程与敏捷过程的区别，以实例的方式具体举例说明这两个过程管理中有哪些点的提升。
1. 作坊过程方式（无组织式） # 在具备一般规模的公司来说都有一套完整的研发流程，以支撑公司的研发体系。这样做的最主要优点是可以保证各个团队的行为规范基本一致，从而保证质量、速度、规范性都是比较一致的。而作坊式的过程管理一个很大的特点就是各个团队之间没有统一的研发流程，从而导致更多细节性的问题。
阐述过程分先后，但作坊式的过程管理的问题并不是先后出现的。而是并发发生的，所以这里的陈述顺序不影响问题的优先级和问题发生事件。下面讨论一下作坊式的过程管理中会遇到的问题。下文中以抽象总结出的结论作为章节标题，再以实例来说明标题。
1.1 边界模糊 # 边界模糊说明两件事：业务边界模糊，时间边界模糊。这两个模糊边界会导致投入的人力未知、质量问题收敛速度未知。所以，项目管理铁三角缺一项就会影响质量，作坊式过程中会缺三项可以说是没有做过程管理。
1.1.1. 业务边界模糊 # 业务边界模糊可以从几个方向说明：
业务需求过大导致的边界模糊 在做过一个从零到一的OAM（Open Application Model）的迭代过程中，需要对OAM建立GUI，YAML配置，版本过程，发布过程等等。每个过程都有无数的细节，例如：在控制应用下的副本数的时候不填代表什么？填0代表什么？填数有代表什么？再比如：在OAM中逻辑概念有十几个，每个逻辑概念可以作为一个逻辑实体。逻辑实体之间的关系会形成三联实体（三个实体之间的特定关系），有甚者会有四联实体。 在这样复杂的场景下总会漏一些在前期需求澄清时总有未想到的细节点，最终都遗留到线上才发现也是有的。
业务澄清模糊导致边界模糊 在做业务澄清时，因为是BA/产品给研发/测试进行讲解总会遇到澄清过程中基于现有的需求理解为某个特性确定为一个方向。但在开发过程中或业务上线后会意识到这个问题不应该在这个方向上，而应该在另外一个方向。例如：K8s的资源管理器Helm界面上支持环境管理不需要支持依赖中的values文件作为指定文件，但后来需要支持。
版本发布导致的业务边界模糊 私有化部署要做版本化，然后在发布Saas产品的时候又要归到版本中。在这个过程中Saas线上用户报的工单，Saas线上用户的简单需求。到底应该在哪个版本来同步到私有化部署的版本中。因为Saas线上客户的需求，工单是需要放在当前线上的版本中的。这样就导致线上需求会上多个版本，如果版本会有一点不同那么就会造成版本差异问题。
1.1.2. 时间边界模糊 # 时间边界模糊可以从几个方向说明：
不做工作量评估，或以人员能力来做工期评估 作坊式过程管理是将工作交给某个人或者交给两个人去做即可，具体什么时间做完做成什么样就没人去管了。 因为业务边界模糊导致，交付时间不确定。 任何时候都可以插入新的工作，导致每个人手中的工作越堆积越多。然后再推导出插入进来的工作先做，前面接手的工作又被延后了。从而导致手中重要的工作一直向后延期，而又无法推动上线。 过大的开发量，导致评估不准确 过长的开发周期直接上线，导致很多点未测试完全，问题遗留到线上解决。问题定位都有可能忘了细节在哪里。 团队协作 私有化部署与Saas服务不同，私有化部署必须在某个时间点对齐功能之后再打版本。这样就会形成团队间协作。一般作坊式工作坊中不会在团队间形成时间对齐理念，因为没有PMO来对齐与跟踪这部分。 1.2 独立个体大于团队协作 # 在作坊式过程的团队形式比较恰当的比喻是团队是一个职能型组织。职能型组织最大的特点是相互独立，专业化团队。在作坊式过程中这样做其实会发生更多的问题，例如：某部分工作再一直堆积而又没有办法加快进度、信息不足导致开发过程的验证不足从而导致质量飘忽不定、同时开启的工作事项越来越多失去重点。
1.2.1 协作过程不通畅 # 团队关系以单个成员独立完成为主，不评审，不检查，不回顾。在这个过程中就会发生信息同步不通畅，无法说明的工作内容与进度，单个成员负责特定业务的问题。
信息同步不通畅 一个很简单的例子：OKR的拆解过程需要从团队的KR拆解为团队成员的O，在用团队成员的O进行具体的KR的拆解，这样会形成KR又下层的O来支撑这个过程。但是在作坊式的团队中虽然使用了比KPI更加现代化的OKR来完成团队目标的制定，但是没有做拆解过程，没有目标来源的讲解过程。那么团队的目标就没有办法落地到每个团队成员中，这样就造成信息不通畅问题。 另外，信息是一种非常重要的资源。当之后某几个成员掌握特定的信息后，他们就可以把信息作为利益交换资本。这样特定成员手里就多了筹码可以跟他人做利益交换。这样的事情多了是不是就很像传统的国企做事风格，要给某些不舔上级的团队成员穿小鞋的时候这个信息差就可以做到一些不利的事情。这是一种在作坊式工坊中的生存方式。
无法说明的工作内容与进度 只在业务上说明一个大概要做的事情，再加上业务模糊问题。在不进行评审与设计，工作拆分的情况下就无法说明具体工作内容，无法跟踪工作事项中的进度。可以在开发过程中来整理是否做过设计，设计评审，工作拆分，工作量评估，工作跟踪等事项既可知道是否已发生这个问题。
单个成员负责特定业务 职能型组织一个特点就是特定的团队完成特定的业务。而在作坊式团队中一个成员负责一块业务，然后如果这块业务最近不需要开发或维护则负责这块的团队成员就闲下来了。了解最多的业务模块的成员永远最忙。无业务备份团队成员概念。
1.2.2 同时开启的工作事项越来越多 # 在开发过程中不设置阶段（里程碑）、不设置目标，从而把团队工作作为一个任何内容都可以插入的，都有必要插入的。在这样的情况下一个团队不管是two pizza团队还是更大的团队，只要是根据这样的规则就会一直开启新的工作项。作者在工作过程中见过一个团队同时开启十几项事务。例如：线上问题修正，KA客户支撑，代码安全扫描问题修正，性能优化，客户小需求几个等等都同时开启。
在这样的情况下，主要特征是规划与执行有问题。规划过程与执行过程无法对齐导致了只做了紧急不重要的事，而做不了规划中的事项。
1.2.3 丢失焦点（这里就是为什么叫冲刺的根因） # 前面说到时间边界模糊，再加上上一节说到同时开启多想工作项。再加一个无周期的环境中又开启多个事项，而不是团队专注于一件事在固定周期内解决这一件事来保持阶段的专注性。这样导致团队成员都很忙，但是又没有完成更多的事情。从而降低成员成就感，并对职位晋升有较大的阻碍。因为职位晋升需要阐明在一个周期内为团队、为公司做了哪些贡献，在作坊式过程中做事既琐碎有误目标总结为贡献就会很难。
1.2.4 任性的成员越来越多 # 团队目标缺失导致团队成员没有行为规范。没有行为规范各个成员就会按照个人理解对代码，开发规范进行实施。在开发过程中就会发现A想这样，B想那样最终就看谁更强硬。而不是看团队整体的目标输出价值，还是稳固质量就开始做自己的事情。导致各做各的，由此任性的成员就从这里出来。
1.2.5 独立个体大于团队协作 # 事情堆积如山，再来新的事情必须排队进行。因为事项同时开启过多，导致每个成员要做的事情都是不一样的。每个人头上都是一堆事要做，而每个事情都有不同的头需要去牵扯出来再做，所以，没有办法去做。</description></item><item><title>02.过程</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E4%BA%A7%E5%93%81%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E4%BA%A7%E5%93%81%E8%BF%87%E7%A8%8B/</guid><description>产品生命周期理论 形成产品护城河的6个阶段
相对论 | 互联网产品生命周期是什么概念？
[软件产品线工程方法的研究和应用] 软件产品线工程 软件产品线实践与模式
模型驱动软件工厂 v0.1
推荐：我的在线电子书和培训咨询 软件产品线工程方法 － 四个主要方法原则</description></item><item><title>08 敏捷实践方法</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E6%95%8F%E6%8D%B7%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E6%95%8F%E6%8D%B7%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</guid><description>什么是 Agile Software Development（敏捷软件开发）？ 敏捷软件开发工具&amp;mdash;-精益开发方法 Scrum精髓：敏捷转型指南 敏捷实践指南</description></item><item><title>08 团队建设目标</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE%E7%9B%AE%E6%A0%87/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE%E7%9B%AE%E6%A0%87/</guid><description>团队建设 # 团队为公司提供了业务承载的能力。公司的业务必须落在具体的实施人员，落在具体的实施流程中才能真正的推动下去。顾每个公司的团队组成，团队文化都是决定着公司的运行水平以及公司业务能力。在一个互联网公司中有多种角色组合而成，一个互联网团队最典型的角色划分：运营，销售，产品，技术，财务，行政。
现在互联网的大环境中互联网团队的专业性和规范性在很多时候被忽略。很多业外认识简单的认为我只要技术团队就可以实现出来我想要的软件，实现出来软件之后就可以等着用户来赚钱了。最简单的方式早就了最简单的问题：业务驱动，问题驱动。业务驱动的问题在于对于整体的业务不能充分的理解与规划，最终导致业务不能在产品中形成闭环。大大的降低每个业务所提供的价值。有效的组织与规划业务可以最大化的提高业务的价值，并充分的利用业务的边缘效应。
顾对于业外人事来说建立技术团队是比较困难的。对于团队中的人员配比情况，团队的协作方式，团队的工作计划制定方法等都不能很好的控制。这里讨论团队的水平团队发展的几个阶段，为团队建设制定目标。在不同的阶段提供阶段性的指导工作。
团队的发展阶段 # 上面说到对业务的规划能力是由产品去负责的。对于互联网团队的四个方面的其他三个方面的规划和策略的制定由其他的角色负责。技术由架构师负责，组织由Leader负责，过程由CIO负责。
在软件研发团队中软件团队的建设目标与组织中台的建设过程是相关的，软件研发团队在组织中台的中后台。软件研发团队帮助整个团队拥有创新，聚焦的能力。组织中需要为前台团队提供哪些能力才能为公司提供最快的创新能力，最强的销售能力。并且为公司内部协作提供规范的流程等等。
本文为团队组织的目标以及发展提供一些思考。团队是随着企业的发展在不断变化的，团队的各方面在不同的阶段团队有着不同的团队需求。公司对团队的要求也会发生着不同的变化。
实现业务目标 # 第一个阶段，主要目标是建立团队，并让团队能承接起现在的业务。并随着业务的不断发展为业务提供不断的创造力。这个阶段要达到的目标是实现盈利，因为初创团队对于企业来说一直都是在投入。所以在团队搭建起来之后第一目标是先盈利，在盈利的基础上再考虑其他的内容。
在国内很多公司很长时间都处于这个水平。在盈利与亏损的边缘，不能发展出一套自己的组织体系。
降本增效 # 第一阶段没有发展好的情况下很多公司就着急降本增效。一方面不盈利很定要降本，另一方面降本之后活还是那么多需要做。所以，第一阶段直接就进入降本增效是对公司所做的事情的一种放弃，放弃团队成立时公司对业务的理想与追求。
这样的公司会一直局限于此，因为放弃了企业所最基本的一项：理想。在红海竞争的情况下，没有理想，没有追求的公司是发展不下去的。在没有理想、没有追求的情况下整个团队都不会再去努力、不会再去付出，没有这些就没有成功的可能。
这个阶段时需要进行分析，进行过程、流程的分析。使用精益的价值流图的方式降低流程中的风险以及不必要的步骤，以这样的方式去降本增效。
产品运营 # 对于组织完成降本增效之后，会加大对产品研发、制造的投入。开始把系统完善起来，并规范化数据支持的内容。为一个好产品而不断的努力着。
组织协作 # 不断的对产品研发的投入会促成团队的发展。团队发展起来之后就会发现沟通、协作成为一个问题。所以，团队内，团队间就会形成有形、无形的规则满足团队协作的要求。在这个时候团队文化就成为指导这个规则的一个方法。之前团队的氛围就慢慢的成为公司的文化。
形成规范 # 团队文化不能真正的指导团队工作，对于团队的约束也不强。所以，需要落地到具体的工作规范。以组织形式，沟通形式，协作方法来实现对于大团队的控制。这个时候就是公司整体的规范形成的时候。例如：组织中台的形成基本上都是到达一定水平的公司才会形成。
团队建设目标 # 团队的目标还是为了公司的发展，公司的创新能力。对于这个最终目标可以拆解为：
使能 为不同的团队赋能，让其可以更好的发挥本团队的特长。 创新 创新能力，灵活的组织形式。 聚焦 聚焦各自团队的能力输出以及项目中能够使用的能力。 总结 # 在团队管理过程中持心要正，做事才可以为公司考虑。为发展考虑，为未来考虑。
参考 # 释放潜能：平台型组织的进化路线图</description></item><item><title>09 产品开发方法</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/</guid><description>达成统一 # 小时候，你一定玩过电话游戏或者类似的传舌游戏 ，把一件事耳目给另一个小伙伴，然后通过耳语的方式在小伙伴间逐个传，直到转一 圈，最后一个小伙伴说出他得到的被歪曲的信息，然后大家哄然而笑 。 我和孩子们在餐桌上也会玩这个游戏。 给家有儿女的父母亲提个醒 ： 这是个避免孩子们庆倦大人吃饭期间说话的好方法 。
在成年人的世界里，我们也在继续玩这个游戏，只是不再通过耳语的方式 。 我们写长篇文档，做看起来很正式的讲解，把文档传给其他人，然后他们做出完全不符合预期的事情。他们拿到文档后可能会据此写出更多的文档，传给不同的人 。然而，结果并不像小时候玩的游戏那样，到最后，我们没有一个人笑得出来。
人们在阅读指导文挡的时候，总是会对内容产生误解。
共享文档并不代表达成共识 # 使用用户故事的目的是达成共识 # 参考 # 用户故事地图 产品故事地图</description></item><item><title>09 产品开发方法 01 用户故事地图</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95-01-%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95-01-%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE/</guid><description>用户故事地图 # 迭代开始后，待办列表总是以小块形式进入迭代开发，一个迭代接着一个迭代。碎片化的方式，不能给产品以及开发团队一个整体的视觉。这会出现，优先级排列问题，或者产生多个迭代后，用户还是看不到用户想要的东西的雏形。
实施方法 # 3C原则
参考： # 什么是用户故事地图?
工具 # Visual Paradigm teambition</description></item><item><title>09 创业价值流</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%88%9B%E4%B8%9A%E4%BB%B7%E5%80%BC%E6%B5%81/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%88%9B%E4%B8%9A%E4%BB%B7%E5%80%BC%E6%B5%81/</guid><description>精益工具 精益六西格玛管理
http://www.sohu.com/a/199806021_99948497 https://www.jianshu.com/p/67bff4e384b5 http://blog.sina.com.cn/s/blog_17f8450880102xamu.html https://blog.csdn.net/chktsang/article/details/88635213 http://www.sohu.com/a/137943539_650095</description></item><item><title>09 公司体系建立</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%85%AC%E5%8F%B8%E4%BD%93%E7%B3%BB%E5%BB%BA%E7%AB%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%85%AC%E5%8F%B8%E4%BD%93%E7%B3%BB%E5%BB%BA%E7%AB%8B/</guid><description>他需要建立高效卓越的体系，带领团队去攻城略地，在规定的时间内完成项目。
如何带领团队“攻城略地”？优秀的架构师这样做</description></item><item><title>09 团队目标管理</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%9B%A2%E9%98%9F%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%9B%A2%E9%98%9F%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86/</guid><description>团队执行力的问题 # 团队执行力在哪里？团队的输出怎样定义，团队是否可以完成更有效的事情？我们的团队是不是反应了客户的真是需求情况？
有团队并不一定有执行力，有团队并不执行
团队目标管理 # 团队的目标需要怎样做
目标可视化 #</description></item><item><title>09 业务、技术、组织、过程</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%B8%9A%E5%8A%A1%E6%8A%80%E6%9C%AF%E7%BB%84%E7%BB%87%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%B8%9A%E5%8A%A1%E6%8A%80%E6%9C%AF%E7%BB%84%E7%BB%87%E8%BF%87%E7%A8%8B/</guid><description>背景 # 在本系列的第一篇文章中介绍了软件开发过程中所要涉及到的工作领域，以及工作领域与产品研发过程的关系。
业务、技术、组织、过程 # 有机的一个整体。缺一不可。不同的公司就看着不同的主导方。在业务主导的公司中业务部
业务 # 业务代表着公司的方向，业务盈利能力代表着公司的能力。
技术 # 技术代表着公司的技术能力，能为怎样的业务提供支持。为业务提供怎样的支持
组织 # 组织的完善程度代表着组织的分工。组织分工是否详细代表着公司业务能否做深度的工作。
组织代表着公司的实施能力，执行力的就是组织的能力
过程 # 实施过程，过程优化等
总结 # 参考 #</description></item></channel></rss>