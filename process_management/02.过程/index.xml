<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02 过程 on</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/</link><description>Recent content in 02 过程 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>02.过程</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E4%BA%A7%E5%93%81%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E4%BA%A7%E5%93%81%E8%BF%87%E7%A8%8B/</guid><description>产品生命周期理论 形成产品护城河的6个阶段
相对论 | 互联网产品生命周期是什么概念？
[软件产品线工程方法的研究和应用] 软件产品线工程 软件产品线实践与模式
模型驱动软件工厂 v0.1
推荐：我的在线电子书和培训咨询 软件产品线工程方法 － 四个主要方法原则</description></item><item><title>08 敏捷实践方法</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E6%95%8F%E6%8D%B7%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E6%95%8F%E6%8D%B7%E5%AE%9E%E8%B7%B5%E6%96%B9%E6%B3%95/</guid><description>公司级的软件过程实践系列文章，请参见连接。
什么是 Agile Software Development（敏捷软件开发）？ 敏捷软件开发工具&amp;mdash;-精益开发方法 Scrum精髓：敏捷转型指南 敏捷实践指南</description></item><item><title>08 团队建设目标</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE%E7%9B%AE%E6%A0%87/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/08-%E5%9B%A2%E9%98%9F%E5%BB%BA%E8%AE%BE%E7%9B%AE%E6%A0%87/</guid><description>公司级的软件过程实践系列文章，请参见连接。
团队建设 # 团队为公司提供了业务承载的能力。公司的业务必须落在具体的实施人员，落在具体的实施流程中才能真正的推动下去。顾每个公司的团队组成，团队文化都是决定着公司的运行水平以及公司业务能力。在一个互联网公司中有多种角色组合而成，一个互联网团队最典型的角色划分：运营，销售，产品，技术，财务，行政。
现在互联网的大环境中互联网团队的专业性和规范性在很多时候被忽略。很多业外认识简单的认为我只要技术团队就可以实现出来我想要的软件，实现出来软件之后就可以等着用户来赚钱了。最简单的方式早就了最简单的问题：业务驱动，问题驱动。业务驱动的问题在于对于整体的业务不能充分的理解与规划，最终导致业务不能在产品中形成闭环。大大的降低每个业务所提供的价值。有效的组织与规划业务可以最大化的提高业务的价值，并充分的利用业务的边缘效应。
顾对于业外人事来说建立技术团队是比较困难的。对于团队中的人员配比情况，团队的协作方式，团队的工作计划制定方法等都不能很好的控制。这里讨论团队的水平团队发展的几个阶段，为团队建设制定目标。在不同的阶段提供阶段性的指导工作。
团队的发展阶段 # 上面说到对业务的规划能力是由产品去负责的。对于互联网团队的四个方面的其他三个方面的规划和策略的制定由其他的角色负责。技术由架构师负责，组织由Leader负责，过程由CIO负责。
在软件研发团队中软件团队的建设目标与组织中台的建设过程是相关的，软件研发团队在组织中台的中后台。软件研发团队帮助整个团队拥有创新，聚焦的能力。组织中需要为前台团队提供哪些能力才能为公司提供最快的创新能力，最强的销售能力。并且为公司内部协作提供规范的流程等等。
本文为团队组织的目标以及发展提供一些思考。团队是随着企业的发展在不断变化的，团队的各方面在不同的阶段团队有着不同的团队需求。公司对团队的要求也会发生着不同的变化。
实现业务目标 # 第一个阶段，主要目标是建立团队，并让团队能承接起现在的业务。并随着业务的不断发展为业务提供不断的创造力。这个阶段要达到的目标是实现盈利，因为初创团队对于企业来说一直都是在投入。所以在团队搭建起来之后第一目标是先盈利，在盈利的基础上再考虑其他的内容。
在国内很多公司很长时间都处于这个水平。在盈利与亏损的边缘，不能发展出一套自己的组织体系。
降本增效 # 第一阶段没有发展好的情况下很多公司就着急降本增效。一方面不盈利很定要降本，另一方面降本之后活还是那么多需要做。所以，第一阶段直接就进入降本增效是对公司所做的事情的一种放弃，放弃团队成立时公司对业务的理想与追求。
这样的公司会一直局限于此，因为放弃了企业所最基本的一项：理想。在红海竞争的情况下，没有理想，没有追求的公司是发展不下去的。在没有理想、没有追求的情况下整个团队都不会再去努力、不会再去付出，没有这些就没有成功的可能。
这个阶段时需要进行分析，进行过程、流程的分析。使用精益的价值流图的方式降低流程中的风险以及不必要的步骤，以这样的方式去降本增效。
产品运营 # 对于组织完成降本增效之后，会加大对产品研发、制造的投入。开始把系统完善起来，并规范化数据支持的内容。为一个好产品而不断的努力着。
组织协作 # 不断的对产品研发的投入会促成团队的发展。团队发展起来之后就会发现沟通、协作成为一个问题。所以，团队内，团队间就会形成有形、无形的规则满足团队协作的要求。在这个时候团队文化就成为指导这个规则的一个方法。之前团队的氛围就慢慢的成为公司的文化。
形成规范 # 团队文化不能真正的指导团队工作，对于团队的约束也不强。所以，需要落地到具体的工作规范。以组织形式，沟通形式，协作方法来实现对于大团队的控制。这个时候就是公司整体的规范形成的时候。例如：组织中台的形成基本上都是到达一定水平的公司才会形成。
团队建设目标 # 团队的目标还是为了公司的发展，公司的创新能力。对于这个最终目标可以拆解为：
使能 为不同的团队赋能，让其可以更好的发挥本团队的特长。 创新 创新能力，灵活的组织形式。 聚焦 聚焦各自团队的能力输出以及项目中能够使用的能力。 总结 # 在团队管理过程中持心要正，做事才可以为公司考虑。为发展考虑，为未来考虑。
参考 # 释放潜能：平台型组织的进化路线图</description></item><item><title>09 产品开发方法</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95/</guid><description>公司级的软件过程实践系列文章，请参见连接。
达成统一 # 小时候，你一定玩过电话游戏或者类似的传i舌游戏 ，把一件事耳目给另一个小伙伴，然后通过耳语的方式在小伙伴间逐个传，直到转一 圈，最后一个小伙伴说出他得到的被歪曲的信息，然后大家哄然而笑 。 我和孩子们在餐桌上也会玩这个游戏。 给家有儿女的父母亲提个醒 ： 这是个避免孩子们庆倦大人吃饭期间说话的好方法 。
在成年人的世界里，我们也在继续玩这个游戏，只是不再通过耳语的方式 。 我们写长篇文档，做看起来很正式的讲解，把文档传给其他人，然后他们做出完全不符合预期的事情。他们拿到文档后可能会据此写出更多的文档，传给不同的人 。然而，结果并不像小时候玩的游戏那样，到最后，我们没有一个人笑得出来。
人们在阅读指导文挡的时候，总是会对内容产生误解。
共享文档并不代表达成共识 # 使用用户故事的目的是达成共识 # 参考 # 用户故事地图 产品故事地图</description></item><item><title>09 产品开发方法 01 用户故事地图</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95-01-%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%96%B9%E6%B3%95-01-%E7%94%A8%E6%88%B7%E6%95%85%E4%BA%8B%E5%9C%B0%E5%9B%BE/</guid><description>公司级的软件过程实践系列文章，请参见连接。
用户故事地图 # 迭代开始后，待办列表总是以小块形式进入迭代开发，一个迭代接着一个迭代。碎片化的方式，不能给产品以及开发团队一个整体的视觉。这会出现，优先级排列问题，或者产生多个迭代后，用户还是看不到用户想要的东西的雏形。
实施方法 # 3C原则
参考： # 什么是用户故事地图?
工具 # Visual Paradigm teambition</description></item><item><title>09 创业价值流</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%88%9B%E4%B8%9A%E4%BB%B7%E5%80%BC%E6%B5%81/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%88%9B%E4%B8%9A%E4%BB%B7%E5%80%BC%E6%B5%81/</guid><description>公司级的软件过程实践系列文章，请参见连接。
精益工具 精益六西格玛管理
http://www.sohu.com/a/199806021_99948497 https://www.jianshu.com/p/67bff4e384b5 http://blog.sina.com.cn/s/blog_17f8450880102xamu.html https://blog.csdn.net/chktsang/article/details/88635213 http://www.sohu.com/a/137943539_650095</description></item><item><title>09 公司体系建立</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%85%AC%E5%8F%B8%E4%BD%93%E7%B3%BB%E5%BB%BA%E7%AB%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%85%AC%E5%8F%B8%E4%BD%93%E7%B3%BB%E5%BB%BA%E7%AB%8B/</guid><description>他需要建立高效卓越的体系，带领团队去攻城略地，在规定的时间内完成项目。
如何带领团队“攻城略地”？优秀的架构师这样做</description></item><item><title>09 团队目标管理</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%9B%A2%E9%98%9F%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E5%9B%A2%E9%98%9F%E7%9B%AE%E6%A0%87%E7%AE%A1%E7%90%86/</guid><description>公司级的软件过程实践系列文章，请参见连接。
团队执行力的问题 # 团队执行力在哪里？团队的输出怎样定义，团队是否可以完成更有效的事情？我们的团队是不是反应了客户的真是需求情况？
有团队并不一定有执行力，有团队并不执行
团队目标管理 # 团队的目标需要怎样做
目标可视化 #</description></item><item><title>09 业务、技术、组织、过程</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%B8%9A%E5%8A%A1%E6%8A%80%E6%9C%AF%E7%BB%84%E7%BB%87%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/09-%E4%B8%9A%E5%8A%A1%E6%8A%80%E6%9C%AF%E7%BB%84%E7%BB%87%E8%BF%87%E7%A8%8B/</guid><description>公司级的软件过程实践系列文章，请参见连接。
背景 # 在本系列的第一篇文章中介绍了软件开发过程中所要涉及到的工作领域，以及工作领域与产品研发过程的关系。
业务、技术、组织、过程 # 有机的一个整体。缺一不可。不同的公司就看着不同的主导方。在业务主导的公司中业务部
业务 # 业务代表着公司的方向，业务盈利能力代表着公司的能力。
技术 # 技术代表着公司的技术能力，能为怎样的业务提供支持。为业务提供怎样的支持
组织 # 组织的完善程度代表着组织的分工。组织分工是否详细代表着公司业务能否做深度的工作。
组织代表着公司的实施能力，执行力的就是组织的能力
过程 # 实施过程，过程优化等
总结 # 参考 #</description></item><item><title>10 软件过程</title><link>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/10--%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/process_management/02.%E8%BF%87%E7%A8%8B/10--%E8%BD%AF%E4%BB%B6%E8%BF%87%E7%A8%8B/</guid><description>背景 # 从企业的角度看，软件架构的设计和实现关系着企业的生存与发展，但是业内从来没有重视过这个过程。就是因为我们所有的从业人员都没有意识到架构设计与实现过程中并不是只有代码实现这个层面的内容。就像很多开发认为测试是开发的辅助角色一样。
本文约定 # 之前我有使用过建筑架构设计、城市规划设计等进行类比软件架构设计与实施的过程。本文我们在换一种方式以航天飞机的构建、发射、回收的过程为对比。航天飞机最出名的应该是阿波罗13号，我们以阿波罗系列的这个过程为例去完成设计。
航天飞机 # 对于耗费巨大、组织复杂、工程繁琐的系统的构建。对于工程系统来说最简单最通用的三种方法就是：
分解 抽象 知识 航天飞机最主要的是可以安全的上去，并且安全的回来。所以在航天飞机构建、发射、回收都需要建立体系，并为这套体系进行设计与实施。故航天飞机并不是空气动力学、材料工程学、机械工程学、经典物理学、光学、无线电学中的一门就可以完成的事情，需要很多体系结合并实践。
不想推广的的认为软件也是复杂到这种程度的复杂。不过互联网软件也是有它复杂的内容，例如：现在仍然没有完美的的软件工程方法论，没有规范的软件设计规范，没有系统化的软件质量保证体系等等。
在航天飞机中上的与轨道舱对接，与推进系统对接使用到最大的最好的思想是分解与隔离。这是为了能够在发生故障时进行不扩大化、控制化的目标，需要进行设计的过程。设计的最主要是备用方案，就像《设计已死？》中提到的设计是必要的。
构建过程 # 需要非常专业的设备，专业的技术，专业的人员去完成专业的事情。按照我对航天飞机建造的理解我把它分为三块：训练，建造，测试，运输。在网上查了一下NASA的情况后才发现没有那么简单。NASA下辖了10个科研单位，每个单位都是鼎鼎大名！大名鼎鼎的喷气推进实验室是NASA的合同运作单位。并且常青藤大学中绝大部分人在NASA，Google，FaceBook，Twitter这样的公司就职，并且NASA比商业企业公司给出的待遇水平要低很多，还是有很多常青藤大学毕业的学生想投入到NASA的怀抱中。从这个角度看NASA是真正聚集了大量聪明人在一起的一个地方。
训练内容包括很多，我这里只列几项网上可以轻易找到的： 测试： 运输： 这只是其中的一小部分，有了这些地面设施之后为航空航天器的上天才能有坚实的支撑体系。为地面的构造不是只在地面上可行做好了完善的准备，可以适应航天飞机在上天，太空遨游，返回的过程中各种的情况。
在地面模拟、实验得到的数据与指标为真正的离开地面做了很大的准备，并应用到真正系统飞天的过程中。这其实是更低成本，更快成型的解决方案。
发射过程 # 最经典的就是开始倒数10,9,8,7&amp;hellip;但是在发射之前还需要做多项检查，确认工作。包括将发射火箭运输并安放到发射架上，发射架运行到指定位置，灌入燃料等等步骤。但是在我们外行人眼中就之后最后的那么几分钟的倒计时以及发射过程。
回收过程 # 降落场地，降落过程监控，降落时间，意外情况考虑。需要一套操作手册对降落后打开舱门到将航天飞机拉回到机舱的过程的检查工作。并且形成分析报告后以备之后的过程改进。
软件 # 总结 # 参考 #</description></item></channel></rss>