<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>00.架构师知识体系 on</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/</link><description>Recent content in 00.架构师知识体系 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://guowei1651.github.io/architecture/00.knowledge-system/index.xml" rel="self" type="application/rss+xml"/><item><title>01 什么是软件架构？</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/01-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/01-%E4%BB%80%E4%B9%88%E6%98%AF%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</guid><description>背景 # 从事软件行业多年后总有一些疑问：软件架构是什么？业务模型是什么？业务蓝图怎么做？等等问题萦绕在心头。这些问题很多都是因为业界没有标准、没有标准实施方法，这样就会就需要有人去了解、理解、分析、权衡。
人的认知过程可以简单的说成：对于同一件事物不同的人的理解也是不同的，一个人在不同的时间对同一件事也有着不同的理解。所以在软件架构实施过程中不同的人有不同的方法去实施、不同的实施侧重非常常见，故对于架构的实施效果就不能很好的把控。
对于软件来说架构的实施效果是软件架构的最终价值。前人也对软件架构的价值思考与总结，这些总结对于真正的实施软件架构建设的人员来说总有那么一些借鉴意义。故在此对这些内容进行汇总。
架构的历史 # 在1968年时，软件架构还不叫软件架构那会叫：软件体系结构。
The Structure of the &amp;lsquo;THE&amp;rsquo; Multiprogramming System
戴克斯加（Edsger Dijkstra）在THE操作系统设计时，定义了这个操作系统的结构。这个结构最初的就是软件体系结构。软件体系结构在1975年，软件体系结构思想被升华：
Architecture is the complete and detailed specification of the user interface
那时的布鲁克斯（Frederick Brooks）认为架构就是对用户接口的完整详细的规范。这个是对软件的对外属性的描述工作。从一个侧面定义软件架构。而另外一个高人帕纳斯在20世纪80年代左右对软件架构有一系列的认知提升：
information hiding and usage of interface（Parnas，1972) structure separation (Parnas, 1974） the relationships between software structure and its quality （Parnas，1976）
而在1991年由罗伊斯（Walker E. Royce）和 罗伊斯（Winston W. Royce）在正式文献中使用Software Architecture：
Software Architecture: Integrating Process and Technology authored
又过了两年，在1993年时Software Architecture被定义，此定义成为软件体系结构研究的公认基础，由加兰（David Garlan）和肖（Mary Shaw）对其进行了总结：
An Introduction to Software Architecture</description></item><item><title>02 终极问题--为什么要架构设计？</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/02-%E7%BB%88%E6%9E%81%E9%97%AE%E9%A2%98--%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/02-%E7%BB%88%E6%9E%81%E9%97%AE%E9%A2%98--%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>背景 # 对于架构的价值的认知代表着公司会在技术方面投入多少资源。而很多公司之所以选择在业务创新上大做文章而不是在技术上做创新，其实也代表着在国内做技术的种种尴尬之处。从事业务创新也不代表技术投入没有价值，不过需要让大家认知到技术与业务应该怎样权衡成为了一个很难的问题。
作者以多年从事软件行业经验来看，业务和技术需要得到一个比较好的平衡点。任何一方占据上方那整个项目/产品就会滑向深渊。所以，在这里强调架构的价值成为平衡技术和业务的天平的一个重要事项。
对于架构在天平上的作用来说，架构需要每个人都需要可以理解。这样才能够让人们真正的理解架构，并能够深入理解技术人员的努力。达到最大的沟通效果也是架构的一个重要目标。
价值 # 最近在学习架构知识的时候找到了一个叫做IASA（International Association for Software Architects，国际软件架构师协会）的组织。这个组织提出作为系统架构师基础的起源和演进“架构的五大基础”，包括了解企业的技术战略、IT 背景、质量因素、设计技能和人员能动性这五大基础。所以这个提供了更好的学习路径。
下图是在IASA中一篇介绍架构价值的文章中摘取的： 从各种方向上给出了解释架构的价值，在IASA中架构师
架构意义 # 以下是《系统架构师教程》中关于架构重要性的描述：
软件架构是降低成本、改进质量、按时和按需交付产品的关键因素。
架构设计能够满足系统的品质 系统的功能性是软件架构师通过组成体系架构的多种元素之间的交互作用来支持的。架构设计用于实现系统的品质，如性能、安全性和可维护性等。通过架构设计文档化，可以尽早的评估项目的这些品质。
架构设计使受益人达成一致的目标 架构设计的过程使得不同的受益人达成一致的目标，体系结构的过程需要确保架构设计被清楚地传达与理解。一个被有效传达的体系架构使得涉众们可以辩论决议和权衡，反复讨论，最终达成共识。文档化体系架构是非常重要的，这是软件架构师的主要职责。
架构设计能够支持计划编制过程 架构设计将确定组建之间的依赖关系，直接支持项目计划和项目管理的活动，例如：细节划分，日程安排，工作分配，成本分析，风险管理和技能开发等；架构师还能协助估算项目成本，例如，体系架构决定使用第三方组建的成本，例如，体系结构决定使用第三方组建的成本，以及支持开发的所有工具的成本；架构师支持技术风险的管理，包括指定每一个风险的优先次序，以及确定一个恰当的风险缓解策略。
架构设计对系统开发的指导性 架构设计主要目标就是确保体系架构能够为设计人员和实现人员所承担的工作提供可靠的框架。很明显，这笔简单的传送一个体系架构视图要复杂多。为了确保最终体系架构完整性，架构师必须明确的定义体系机构，因为它确定了体系架构的重要元素，例如系统的组件，组件之间的接口以及组件之间的通信。 架构师同时还必须定义恰当的标准和指导方针，他们将会引导设计人员和实现人员的工作，对开发过程活动采取恰当的架构回顾和评估，能够确保体系架构的完整性。这些QA（Quality Assurance，质量保证）活动的任务是确定体系架构的标准和指导方针的有效性。
架构设计能够有效的管理复杂性 如今的系统越来越复杂，这种复杂性需要我们去管理。体系架构通过构件及构件之间关系，描述了一个抽象的系统，因而提供了高层次的复杂管理的方法。同样，架构设计过程考虑组件的递归分解。这是处理一个大的问题是很好的一个方法，它可以把这个大问题分解成很多的小问题，在逐个的解决。
架构设计为复用奠定了基础 架构设计过程可以同时支持使用和建立复用资源。复用资源可以降低一个系统的成本，并且可以改进系统的质量，这些好处已经被证明。一个体系架构的建立，能够支持大粒度的资源服用。例如，体系架构的重要组件和他们之间的接口和质量，能够支持现货供应的组件，存在的系统和封装的应用程序等的选择，从而可以用来实现这些组件。
架构设计能够降低维护费用 架构设计过程可以在很多方面帮助我们降低维护费用。首先最重要的是架构设计过程要确保系统的维护人员是一个主要的涉众，并且他们的需求被作为首要的任务满足。一个被且当的系统维护机制，并且在建立体系架构的时候还要考虑系统的适应性和可扩充性。
架构设计能够支持冲突分析 架构设计的一个重要的好处是它可以允许我们在采取改变之前判断它所产生的影响。一个软件架构确定了主要的组件和它们之间的交互作用，两个组件之间的依赖性以及这些组件对于需求的可追溯性。有了这个信息，例如需求的改变等可以通过组件的影响来分析。同样的，改变一个组件的影响可以在依靠它的其他组件上分析出来。
这些描述中可以分为几类：沟通类，计划类，技术类。沟通类主要说明可以与各利益相关方建立统一的共识，可以协调各方达成最终的一致性。计划类主要为架构的实施落地起到计划与指导的作用。技术类是为技术提供更好的底层框架，可以是所有的非功能性需求。
总结 # 架构是对于沟通，计划，技术的一个统一过程。架构所起到的作用就所有人的目标，认识达成一致。
参考： # 演讲: 来自IASA的观点——系统架构的五大基础 The Value of Architecture Who Needs an Architect? 译文 | 为什么软件架构如此重要？ 学阿里中台，80%的人只学到了皮毛！揭秘阿里中台的12个架构思维和原则</description></item><item><title>03 02怎么学习架构设计？</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/03-02%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/03-02%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>背景 # 对于
设计方法 # 数据库驱动 需求驱动 质量属性驱动(ADD) 领域驱动(DDD) 模型驱动(MDD) 风险驱动 演进驱动 ABSD
设计过程 # 总结 # 参考： # 从数据驱动开发到领域驱动设计的经验 软件架构理论与实践</description></item><item><title>03 怎么学习架构设计？</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/03-%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/03-%E6%80%8E%E4%B9%88%E5%AD%A6%E4%B9%A0%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>背景 # 前面几篇文章说了很多问题，什么是架构、架构为什么重要、架构师知识体系等文章，也翻译了《如何系统学习软件设计和架构》。而作者在从业的这么多年以来，也一直在学习架构设计。而业界也有很多架构设计的方法论，理论基础。
对于系统的学习架构作者也没有很好的方法，去系统的学习架构方法。作者只能尽量的去查找并学习架构到底应该怎样学习。这里对于这些方面进行逐个的分析与深入，以帮助作者与读者更好去学习架构设计。
问题定义 # 学习一项事物的时候，做好的方式是带着问题去学习。那么学习架构设计时我们应该带着什么问题去学习呢？
架构到底干了什么？能给我们带来什么？ 谁驱动了架构设计？谁来做架构设计？ 怎么输出一个架构？怎么做架构设计？ 用什么做架构设计？ 什么架构才是好架构？ 架构怎么落地实施？架构落地偏差怎么样解决？ 实践中的架构模式有哪些？ 前面文章中也提过IASA这个组织，这个组织提出来架构师的技能图表。这个技能表比作者之前编写的《架构师知识体系》更加以人为本的方式进行架构师技能描述。下面会总结IASA的技能表和其他的一些内容进行学习架构设计的方法。
思维转变 # 在解决上面的问题之前，需要做一些简单但是很难的事情。从一个程序员升级到架构师并不像从初级到中级、再到高级的这个过程，而从程序员到架构师是一个质的变化。所以说升级到架构师时需要做下面这几件简单而又很难的事情。
第一条思维：从代码跳出来才可以真正的学习架构 # 现在很多高级程序员或者初级架构师有一个重要的误区：&amp;ldquo;架构就是框架&amp;rdquo;、&amp;ldquo;架构就是《高级》技术&amp;rdquo;。作者只能说架构和技术是两个领域的东西。架构是追求美的，技术是准求准的。两个事物的目标都不一样，怎么可能是一种东西。
第二条思维：最新的并不是最好的。 # 适时适事分析决断是最新的技术并不是最好的思维的精华。作者一直坚持着一件事：所有的技术都有它适用的范围，一项技术不可能适用于所有的场景。需要根据具体的使用场景去确定在一个领域内使用的具体技术。例如：通信，在iot场景下的通信最好的方式是mqtt。而在互联网场景的通信最好的方式是HTTP，在微服务场景下最好的通信方式是rpc。
第三条思维：方法论是必不可缺的。 # 作为一个必须要有理论基础。理论基础在软件行业中很多都是经验，而不是具体的公式推导。这些方法论有很多很多，在不同的方面体现着不同的作用。这些方法论是经过很多次经验教训总结归纳出来的。所以从成长的角度来说从别人的经验教训中获取经验是一个聪明人应该做的。例如：奥卡姆剃刀和YAGNI原则都是在不同的场景下总结出相同的经验教训。
第四条思维：为自己织一张知识的网。 # 自我管理是自我提升的最重要内容。而在自我管理中对于架构师的基本技能的管理就需要有完整的技术知识体系（网络）。有了这张网队自己知识的欠缺，知识间联系就更有把握。可以更好完善自我也可以更好的指导实践。
对于这四条思维转变是逐层递进的。在成为架构师的过程中需要不断的学习与总结，总结出系统化的知识体系。最后还是一个现在流行的一句话：人生在于提升认知。
解决方案 # 提出问题是最难的。也就是意识到这里有问题，才有办法去解决这些问题。如果一直没有意识到问题，那问题就永远解决不了。所以，认识问题、认识本质、根因分析才是解决问题的本质。
而在问题定义中我们对于学习架构师这个问题做了一个定义。带着这些问题去解决学习架构师这件事可以更加体系化。
在之前介绍IASA组织中，有一个叫做《系统架构的五大基础》的技能表。这个五支柱的目标是基于以人为本的方法创建一本IT架构能力指南，该指南传达了体系结构发展的各个层次的最佳实践和学习目标。
IT架构师的知识体系是通过对架构师工作任务分析的信息来定义的。我们学习并将其组织成有意义的技能支柱。
我们所有这一切的目标都是在这个环境中，所有人都能找到了学习和实践体系结构的途径和方法。大多数项目失败是因为它们没有按时或按预算完成，更糟糕的是，他们没有解决他们开始的商业问题。我们相信通过共同的技能、工具和培训以解决这些问题，这就是我们创造知识体系的原因。IASA 认为， 以下几点可以说是一个 IT 架构师的成功的必要条件：
技术战略（企业技术战略：BTS） **通过技术开发和实施商业战略的技能。**架构师如果不能深入理解企业的业务背景，或者不具备进一步深入理解的能力， 那么他将无法满足企业、机构、客户的业务目标。他们必要的知识包括金融、IT 企业战略的演进，行业热点、趋势、标准等也是架构师需要长期关注的内容。 具体内容还包括：
商业基础 战略发展与合理化 行业分析 企业价值评估 投资优先次序和规划 需求发现和约束分析 合规性 体系结构方法与框架 风险管理 IT 背景 **管理和交付技术计划时使用的技能和知识。**这里的 IT 背景是指为了形成合理、成熟的解决方案， 一名架构师在一个特定企业背景中所应该具备的技能。这里说的技能应同时包含架构本身的技能和组织流程方面的技能， 也就是说架构师需要在各方面具有执行和创新的能力。举个例子来说， 一名好的架构师不仅须要熟悉行业内的趋势， 理解各项技术的优缺点， 但同时也还需要了解特定 IT 背景中各个各种技术的使用和方法论。
技术项目管理 资产管理 变更管理 基础设施 应用程序开发 治理 测试方法、工具和技术 知识管理 决策支持 平台和框架 设计技能 **在业务和技术中解决问题并在实现之前对其进行描述的技能。**设计技能是架构师的主要技能。拥有设计技能不仅可以创造一个新的架构， 更重要的是对架构设计的审核；我们不能仅仅关注于完美的蓝图，更重要的是决策过程中的判断、依据和各种权衡因素的考量。该领域的技术以及设计的方法论是作为一个名架构师必须具有具备的知识。 当然， 对各种设计的工具、模式、风格、观点的熟悉也必不可少。同时， 架构师须要需要以业务需求为依据来做出合理决策。</description></item><item><title>04 怎么做架构设计</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/04-%E6%80%8E%E4%B9%88%E5%81%9A%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/04-%E6%80%8E%E4%B9%88%E5%81%9A%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>背景 # 写出一份富有感情并对实际工作有指导意义的文章非常不容易。因为工作忙没有时间去梳理与整理这方面的思路是主要原因，但也有人越来越懒、越来越多事情要想造成的问题。而最近会重拾起写作这件事，因为只有对自己的提升才是对自己最大的认可与投资。
随着工作方向的变化，作者本人也对与架构设计的工作遗忘了很多。为了更好的为实际工作做指导，并且时刻保持有效、可靠的架构决策作者准备把之前在各种情况下做的架构设计过程做一个抽象并记录下来。
前面的文章中有关于架构设计理念的描述，架构设计理念是对架构设计的一个高度抽象。也会有架构师知识体系这样纯知识体系的内容。而对于一个架构师应该怎样进行架构设计，架构设计的过程是什么样的业界也有很完善的体系，比如说：MDD、DDD、风险驱动设计，演进式架构等。而本篇是作者在实际工作中真正使用到的架构设计过程。
因作者的知识面、工作方向、从业经验的影响，本文中肯定会有各种遗漏和欠缺。但这里的思路也代表着一种实际实践过程中的指导，故还是写下来。
方向 # 这里先需要明确一下本篇文章中架构设计具体是指那个方向的架构设计。软件的架构设计可以分为：企业架构（EA），业务架构（BA），技术架构（TA）。三个不同的方向就会有三个不同的设计过程与设计结果，所以这里简单的说一下这三个方向：
企业架构规划整个企业的业务蓝图。对蓝图进行拆解与实施。例如：TOGAF，ZACHMAN这样的EA。
业务架构是把企业的业务战略转化为日常运作的渠道，业务战略决定业务架构，它包括业务的运营模式、流程体系、组织结构、地域分布等内容。（TOGAF中的定义）
IT架构对于企业架构与业务架构具体落地到技术层面时应该使用技术结构。
技术架构对于纯技术领域中关于架构的内容。例如：区块链的架构，人工智能的架构。
对于国内从事架构设计方向的大多数人来说最主要的方向还是集中在IT架构上。所以这里也集中说明IT架构的设计过程与方法。
步骤 # 问题域的定义： # 摆在架构师面前的问题是架构需要设计哪些东西？架构要涉及到多少细节？怎样的设计才能让团队顺利实施？对于一个产品来讲技术资产应该怎样进行管理？
针对这些问题，或者更多的架构设计问题应该以怎样的步骤去解决问题？怎样的工具去解决问题？
解决域工具： # 针对上面的问题需要有实际的工具和方法去指导架构师应该怎样完成工作，下面结合过程和方法对这部分进行说明：
软件需求=功能需求+非功能需求+约束： 每个项目都有自己的特点，在接触一个新的项目或着接收一个遗留系统的时候最长听见的一句话是：我们的系统逻辑不像其他的，我们的业务逻辑很复杂。而在架构设计前期最主要的工作就是了解功能、非功能、约束方面的内容。例如：一个业务流程是业务功能方面的需求，整体系统设计容量或现阶段容量、稳定性、安全方面就是非功能需求，再比如是不是有必须要在遗留系统里面保留的内容，是不是遗留系统不可能一步替换掉，用户的操作方式是否可以变更这个就是约束。 这部分主要是为了了解系统需要解决的问题，不管是业务问题还是技术问题，还是其他问题都需要了解清楚。在了解清楚问题域的情况下才能对整体系统有系统型的设计。 而在软件需求阶段有两个比较重要的产出物：容量评估，约束列表。 容量评估实践过程，可以参考：滴滴内部线上系统的容量评估方法，微服务负载保护设计方法，还有作者写的帮Stack Overflow评估一下性能指标。 约束列表就是将项目/产品中关于必须遵守的约定进行记录，以方便之后进行查询与参照。 设计方法选择： 设计方法可以选择数据驱动设计（设计数据流，数据存储结构等），模型驱动设计（UML），领域驱动设计（DDD），风险驱动设计（RDD），演进式设计（EDD）。在一个项目中不可能只选择一种设计方法进行设计工作，所以一般会采用多种方式结合的方式进行架构设计工作。 架构模式选择： 采用云架构还是采用微服务架构其实是需要进行抉择的。就像在IoT项目中最好的方式是使用《控制环路模式》去做相关的架构设计。在区块链系统的架构中最好使用P2P的方式进行架构设计。所以，需要根据不同的项目采用不同的架构模式进行设计。不过选择架构模式是也可能会遇到约束的问题，比如说公司/客户要求必须使用微服务进行设计。针对这部分有要求的项目/产品就需要遵守约束中的规定。 在选择架构模式是也不是只选择一种架构模式，肯定是需要选择一个主架构模式，再选择几个辅助架构模式，使用多种架构模式结合的方式进行架构的设计工作。 架构全景图 选择完成设计方法、架构模式的选择之后，就需要制定一张完整的架构全景图。全景图包括：业务全景图，架构全景图。 业务蓝图可以代表业务的整体情况。 架构全景图代表架构中对于业务的拆分以及业务拆分之间的关系。 填充细节： 在有了全景图之后，就需要对架构设计的细节进行填充。填充的内容包括：业务拆解、业务核心流程设计、技术选型、非功能设计。 架构设计演进： 对于软件系统搭建完成之后，就意味着架构已经开始老化了。而应对架构老化的问题就必须进行架构的演进。而架构演化的过程需要有合适的时候将功能/代码下线。所以这个阶段就是服务治理的过程。 以上描述的是项目架构从0到1的过程。而对于架构从1到100的过程就需要持续的演进动作。而演进过程中要谨防的是架构的腐化，防止架构中被遗留代码/服务/项目限制架构的发展。
实施 # 上面已经说明了架构设计的步骤，而现实中对于这个过程的实施也会有所不同。这里再次说明一下具体实施过程中要做的事情：
非功能需求确认 询问客户系统中的用户数、sku/spu数、交易数、活跃时间、单页面停留时间等信息。 容量评估 收集到这些信息之后再根据上面提供的容量评估方法进行容量评估即可。 整体架构设计 选择架构模式、技术栈后将整体架构按照架构模式的内容拆分为架构模式中所需要的组件。 核心流程设计 进行细节核心流程的设计。比如说交易系统的交易流程。 核心存储结构设计 根据容量评估进行存储的设计。包括：对象存储，内容发布网络，缓存，数据库等。 可靠性、性能、稳定性设计 还是根据容量评估进行非功能型方面的设计。 对于完全新系统来说可以进行这样的设计过程，但对于需要兼容遗留系统的设计过程需要考虑遗留系统的特点。遗留系统最可能使用的方式是使用Sidecar模式进行设计。
总结 # 前面有关于架构设计原则指导，还有架构师的知识体系，这里又说明了个人的架构设计过程。也算是相对完善的阐述了作者对于架构设计的理解。不过之后还是会输出关于其他方法论的具体理解的文章。
参考 # 为什么大部分人做不了架构师？这2点是关键 企业架构方法论可以简化吗？
你是个软件架构师吗？
架构师及其目标在软件项目中的挫折感 给敏捷团队中的架构师的 10 个建议 架构：系统的概要设计 架构师成功沟通的 3 个关键</description></item><item><title>05 架构设计理念</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/05-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/05-%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%90%86%E5%BF%B5/</guid><description>背景 # 一个人怎么做一件事情，取决于一个人怎么认知这件事情。对于架构设计来说也是一样的。到现在软件业界对架构没有一个统一的认知，而在没有统一认知的情况下怎样去做架构设计这件事就成了一件无解事情。
作者本人对与架构设计的认知是：技术架构设计是业务架构的一个组成部分，由业务去规划业务蓝图、发展规划等内容后由技术架构设计将整体架构填充起来。所以，就有了业务架构设计完成后，“灵魂”就诞生了，IT架构则是根据灵魂的需要设计“容器”。
对于企业的业务架构设计的方法论以及理念有很多方法论，例如：ZachMan、TOGAF 、EAF、DODAF等。这里就不讨论关于这部分了。
架构设计理念说明方法 # 在中国传统哲学理念中有：道、法、术、器。道是战略思想、战略规划，体现在以怎样的理念、价值观去指导设计架构工作。法是实现战略的最根本的战术方法、指导方针、思路，体现在架构设计过程中模式。术是具体的手段、具体的行为方式等，体现在架构设计应该遵循的原则。器是工具、体现在架构设计中真正落地事需要进行的分析与设计的方法与工具。
还有这么几句：
道以明向，法以立本，术以立策，势以立人，器以成事。
用最精炼的化将道法术器的作用与关系说明的清晰了然。
在软件界技术、方法、思想都处于高速发展的阶段来说，怎样确保自己不被技术的滚滚洪流所冲倒。借鉴道不易，法简易，术变易，那么通晓架构设计最基本的道就可以长久的屹立不倒。下面会按照道法术器的层级关系分别说明这几部分。
道：架构设计理念 # 架构本质 架构的本质是管理复杂性，微服务本身也是架构演化的结果
道 道解决的是什么是正确的事，法、术、势、器解决的是如何将事情做正确。是不是感觉到有了这套方法论之后就再也不怕做错事了！作者就是以架构设计理念的方法指导具体架构设计工作。以这种方式使工作更加强有责任感与更加高效，并以这种态度开展与推进具体的工作。
通过对平常工作过程中接触到的项目、系统、模块的架构设计的经验与教训的总结，再综合软件业界对于架构设计工作的理念与思想，在加上作者对软件架构设计的理解。最终总结出在实施软件架构设计时需要注意四个要点：$\color{red}{简单，有效，可靠，完善}$。
这四个要点对于架构设计工作至关重要，它覆盖了架构设计工作的方方面面。而且这四个要点在架构设计中并不是孤立的，它们之间有着千丝万缕的联系。简单的架构在有效的解决业务问题的基础上，同时能够提供完备解决方案并且提供可靠的业务服务能力才是好架构。再有：只有简单的架构才能最可靠的，设计过于复杂会产生各种不可控的问题。只有完善的架构才能为提供有效的业务解决方案等等。
简单 以最简单的方式实现，最大限度的降低复杂度。方便开发与验证，提供简单的设计模式，有利于系统内的所有人员达成一致，为高效的组织提供可能。 有效 以有效的方式解决问题。不进行过度设计，以免不必要的复杂度加入到系统中。在精益中提到的拒绝浪费，以最有效的方式完成设计拒绝任何形式的浪费。 可靠 提供可靠的解决方案在现有的场景下选择最适合，最实用的技术搭建可靠的解决方案。 完备 完善的解决问题，不遗留任何问题。支持快速决策的要求，提前考虑可持续发展，异常场景等需要决策的内容。在精益中提倡系统性的思维，根据系统整体情况为系统建设提供完善的解决方案。 法：落地指导 # 法在战略之下提供对于战术方法、指导方针、思路级别的工作指导。对于真正下手进行架构设计前必须明白的一些事情，也是在架构设计过程中用来规范落地中的思路问题的解决方案。
架构落地驱动力 在之前读的几本书中说明了不同的架构设计驱动方法，这些书以不同的方式描述在架构设计过程中以怎样的驱动力来驱动架构设计。 以风险驱动为主的《恰如气氛的架构设计：风险驱动的设计方法》说明在风险不足的情况下不要过多的设计，在风险来之前做推迟决策，在风险来临时做快速决策的方法。 以演进式思路的《演进式架构》说明在UVCA时代软件技术从业人员应该以怎样的方式去应对变化，以达到变化驱动的设计的方法。 以业务为灵魂以技术为肉体的《企业即业务架构设计》说明在有业务这个灵魂的时候技术才是有意义的。并以业务驱动的设计方式推进技术设计的进行。 还有最重磅级的《领域驱动设计：软件核心复杂度应对之道》，它帮我们建立认识世界的大门。 几本书说明了不同的设计驱动力，在不同的驱动力下会要求作出不同的架构设计。这就是需要进行模式思维的时候。
合适的就是最好的 马丁.福勒的《Is Design Dead?》已经很好的阐述了什么样的设计是好设计，作者在这里只是借鉴最终结论：合适的设计就是最好的设计。
模式思维 模式是前人通过不断的努力在某个特定的方面总结固定搭配或流程。像设计模式，架构模式都是这一类的。第一点需要知道在什么场景下哪些模式是最适用的。第二不要拘泥与模式中具体的知道要做到将模式融入到实际的工作中。总结起来就是：规则对于智者来说是指导，对于愚者来说是遵从。
没有万能的银弹 在萨姆·纽曼的《微服务设计》一书中明确的说明没有万能的银弹，也不可能有万能的银弹。这就需要从业人员用自己的分析能力，分析出具体业务中的问题并根据问题形成方案。而不是利用某一个银弹去指导自己一切工作。
架构设计工作推进方式
透明 系统是完全透明的。可以让所有人都能很好的看懂，很快的理解系统。明确的表明系统结构，提供可以可视化，可被评估，可被改进的基础。
合作 对于企业内部、外部业务的支持都是需要通过架构体现出来的。为公司的合作建立基础，在技术体系的基础上，更快的得到共识，更快的达到统一。
开放 架构开放，任何人、任何时间、任何地点都可以提出改进意见。为我们的技术体系建设提供智慧。促进形成开放的组织，开放的过程。为公司建设更加主人公意识的团队与过程。
体系 建立完善的体系。帮助建立完善的思维体系。减少碎片化对系统带来的未知感与不确定感。体系中可以包括：业务，工程，技术，组织等软件工程中的内容。
术：设计工作指导原则 # 术是具体的手段、具体的行为方式等，体现在架构设计应该遵循的原则。要让架构表现哪些内容才能让架构看起来更符合上面的道、法的内容。一个系统架构设计最普遍的要求是安全、稳定、性能和规范这四个大点，还有可能包括提高工程效率、实现业务目标等。要满足这些点需要让架构体现出一下四点：数据化、可视化、体系化、标准化。
数据化 方便进行量化的分析与决策支持工作。这里就需要将业务指标和技术指标全部进行设计与验证。这些指标可以通过可视化进行可视化。
可视化 以直观的方式去获取想要看到的，关心的数据。在可视化中运维需要可视化，帮助快速定位运维问题、以及线上问题快速定位能力。更加方便之后进行弹性伸缩，方面的方法制定。再有业务可视化，基于数据化的内容进行业务数据的展示工作。
体系化 制定技术目标，在目标的基础上进行相关的开发与设计工作。明确框架不可能保证系统的可用性，性能，安全，可扩展性。这些是有架构去完成的。所以，需要一套架构。
标准化 统一公司内部的技术栈，以及技术栈上相关的组件。可以降低技术团队沟通以及技术选型所造成的不一致问题，标准化服务划分标准，为公司构建共同的设计平台以及构建功能的方法。标准化包划分标准，为代码的可读性，标准化质量标准，规范化质量过程中各个方面的质量标准。方便进行验证与实施。标准化运维。用来规范实施过程以及运维过程。
如需四化的具体内容可以留言。
器：方法与工具 # 对于一个技术人来说以什么样的底子支撑架构设计？第一条就是需要对技术有全面的认知。而这个认知不是一时半会就可以形成的，需要有完善的知识体系。例如作者正在输出的《微服务实践》系列文章就是对于技术知识体系的梳理与完善。完善自己的技术知识体系有一个标准，这个标准就是对与统一领域不同技术实现的应用方式都有自己的见解。</description></item><item><title>06 架构师知识体系</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/06-%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/06-%E6%9E%B6%E6%9E%84%E5%B8%88%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB/</guid><description>架构师定位： # 在互联网上可以找到各种各样的架构师定义，就连各种权威组织对架构师的整体定义都是不一致的。所以，这里不对架构师应该是什么样的，怎样达到这样水平做评估。这里只是说明作者本人对架构师知识结构现阶段的理解。
本文限于作者本人的认识水平以及知识结构的影响，对整体架构师的认识和了解可能会不一致。如有任何不妥之处请高人不吝指教。
在互联网上搜索到各种个样的架构师，基本上可以总结为以下三种：
企业架构师(Enterprise Architecture): # EA关注于构建复杂的企业生态系统，并解决高层次的战略问题。企业架构定义了业务架构的战略方向，从而可以理解需要哪些技术设施来支持该架构。 这里最重要的是企业数字化的规划与实施能力。这个从某种角度来说是CIO的一种定义。CIO的工作包括：
制订信息化规划：根据公司整体战略发展，制订IT战略规划、团队建设和业务计划，推动公司信息化建设，就信息化建设向公司提供专业的咨询、建议和规划方案；主持分析信息化需求，制定信息化建设行动计划和时间表； 部门管理与团队建设：负责信息中心的日常工作和部门建设；合理分配任务，决定人员分工；对直接下属进行工作指导、协调和考核评价；负责信息技术团队建设和管理，持续提升团队工作、质量和效率。协调部门内外部信息的及时的沟通，有效沟通业务、职能部门，提供IT技术服务支持。 按照上面对企业架构师工作的规划分析，企业架构师是从运维发展出来的职位。
解决方案架构师(Solution Architecture): # 解决办法结构解决办法是一个完整的过程——与许多不同的过程——这是一个与企业问题与技术解决办法之间的联系。这是：
确定最佳的技术解决办法，尽可能解决现有的业务问题。 对结构、特征、行为和软件的其他方面提出建议。 确定的特点、阶段和解决办法。 提供有关解决方案的具体规定，以确定、管理和确定解决办法。 按照上面对解决方案架构师工作的分析，解决方案架构师从售前，产品，BA等职位发展出来的职位。
技术架构师(Technical Architecture): # 技术架构师主要负责工程问题和软件架构。
从互联网上找到的技术架构师的定义基本上是这样的。但是，从某些角度来看这个定义不完善。从业务技术角度定义系统的由业务架构师、从存储角度定义系统结构的是存储架构师、从计算基础设计定义软件的是元计算架构师、从安全方面定义架构是安全架构师等等。都可以归在这一个层。
从上面可以看出，这些架构师的定义主要的影响是公司所处的行业特性。所以，这里借鉴某位高人的话：
每个人的知识体系都是不一样的，所以，不要以你的知识体系去限制别人。
也不用因为与别人的知识体系不同而自卑，想清楚自己的方向构建自己的知识体系即可。
保持开放的心态也是架构师所必须的^-^！
知识体系要点： # 根据上面的结论，不要认为别人的知识结构就是好的。为自己选择方向构建出适合自己的知识体系才是最好的。可以说是非常好的**&amp;ldquo;闻道有先后,术业有专攻,如是而已。&amp;ndash;《师说》韩愈&amp;rdquo;**的诠释。下面说明知识结构的几个要点：
不要拘泥于知识体系： # 《微服务设计》：
规则对于智者来说是指导，对于愚者来说是遵从。——Douglas Bader
知识体系为我们创建了解决问题的可选集，这个可选集从一定角度来看不可能是完善的。例如：演进式架构？Clean Architecture？DevOps？大家都听说过，但是有哪位能说充分的理解了它？而且对它随着时间的发展，都有不同的理解。所以，过程中需要分析这些技术、过程、实现的思想，在遇到类似的问题的时候去指导其他事情的实践。
举一个简单的例子。在刚毕业那几年有幸接触到CMMI5，其中有两项现在还是印象深刻：量化，持续改进。现在作者本人可以把所有的事情都使用持续改进的思维方式去解决，生活中是否有很多不如意，装修老是有问题？生活总是很混乱？非常现实的问题，怎么做持续改进呢？
从软件过程的知识中衍生出对待生活，对待自己的方式。所以，我们学习的是&amp;quot;道&amp;quot;，使用的才是&amp;quot;术&amp;quot;。
不要把做事停留在&amp;quot;器&amp;quot;的层面，要学习做事过程中的&amp;quot;道&amp;quot;。
可复制的、可传授的知识体系： # 现在人们的思维方式都得到了很大的提升，社会也随着人们的思维方式提升得到了更多的发展。最简单的一个事项：现在人们都在想怎么帮助别人成功。虽然现在有些走偏，各种成功学、各种病毒式传播都是很不好的例子。也有很多很好的例子，例如：技术分享、付费知识等等。
但现在帮助帮助他人成功或者帮助他人成长的过程中，怎样去执行？将自己的知识体系化，系统性的与他人讲解？其实有很多方式，例如：云基础设施，就降低了企业运营软件系统所要成本。
在知识领域没有比较好的方式，因为每个人对事物的理解、解释都是不一样的。所以，最好的办法就是：
授人以鱼不如授人以渔 &amp;ndash;《淮南子·说林训》
这也很符合马斯洛需求层次理论的描述。
知识体系是会随着时间发生变化的： # 世间每时每刻都在发生这变化。随着对知识体系的利用，也会总结出对某一块知识的经验。随着这样的过程对原先的知识体系的认识就会发生变化。以这些经验总结出方法论，去充实知识体系。这样是比较良好的一种对待知识体系的方式，也会帮助个人持续的成长。
使用知识体系指导自己的发展： # 正如上面这句话所说到的，在遇到陌生的事物的时候怎样去面对是一个问题。需要有方法指导即知识体系。
完整的知识体系会是对知识的一种整理过程，可以帮助创建知识体系的人了解自己，了解自己的知识体系。从而不断的将自己推进到更高的层次。
知识体系： # 知识体系可以分为几个层次：个人能力层，外包能力层，解决方案能力层，咨询能力层。 从个人成长角度看会从底层能力成长上层能力。从企业方面，使用企业规划、实施方法去自上而下的完成。从整体上讲有了知识体系之后可以组织自己的知识，并得知自己的欠缺。既可以解决问题，还可以指导学习。
以整体的企业架构（EA）为主组合运营、咨询、《软件工程》中的内容形成整套的架构师知识体系。企业架构主要帮助架构师解决项目从哪里来，怎么来，怎么规划的问题。运营，咨询帮助进行辅助的工作支持。再辅以《软件工程》从需求-&amp;gt;分析建模-&amp;gt;架构模式-&amp;gt;实现技术-&amp;gt;安全-&amp;gt;质量-&amp;gt;运维。
架构师的知识体系里面&amp;quot;技术实现&amp;quot;是个人基础能力部分。就像很多文章都在讨论的《架构师是否应该写代码》的问题一样。架构师必须可以整体上把握系统的情况，还可以在细节上做把控。
内容简介： # 重要内容： # 企业架构模式； 分析建模； 质量； 运维； 设计模式。 规划和设计系统时必须的知识。</description></item><item><title>07 架构师关注那些东西</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/07-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%85%B3%E6%B3%A8%E9%82%A3%E4%BA%9B%E4%B8%9C%E8%A5%BF/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/07-%E6%9E%B6%E6%9E%84%E5%B8%88%E5%85%B3%E6%B3%A8%E9%82%A3%E4%BA%9B%E4%B8%9C%E8%A5%BF/</guid><description>背景 # 技术人员在做到一定阶段之后总会遇到对技术的迷惘，对个人发展的迷失。是不是要进行抉择，选择继续走技术的路线，还是转行做PM，还是转行做其他？
我认为选择一个自己喜欢的、愿意为之付出的工作，并且一直坚持下去。这样就是对自己的最大的成全与鼓励。
关注内容 # 作为架构师，他是需要为业务与技术实现之间架起一座稳固、可靠桥梁的人。所以，架构师需要对业务、技术、实施、运营等都有深入的理解与规划的能力。我们最主要的目标是为业务提供对技术实现的信心，为技术人员提供整体规划的目标，为运维人员提供可管理的软件系统。为了满足这些要求，架构师需要明确自己的工作重心与工作目标。这样才能在纷繁复杂的职责要求、工作内容中找到自己的一条路。
我认为的工作重心： 1. 关心业务模型 # 从业务分析（BA）的招聘信息来看，人们对BA的认识还是很低。没有系统化的业务分析方法，不知道怎么分析。要不就是UML中的用例图、流程图，这些图将用户需求割裂为一小块一小块的。无法整体看到完整的用户需求，无法分析某一个功能对用户提供的价值的高低。
所以就现在的需求分析、建模水平，需要一个专业的人员将交错的、割裂的需求整理成一个通畅的业务流，并将业务流中的业务实体分析出来形成技术实体。
并且作为架构师，也应该对业务有一定的坚持。因为这个是体现架构师价值的点，如果只关心技术，那就是一个纯粹的开发人员。业务人员将不能满足要求的需求过来时，架构师连基本的判断都没有那就会导致整个项目的混乱。
2.关心技术架构 # 在领域建模活动中，问题域指构成你所分析业务的那些过程、实体和约束条件。领域建模，也称领域分析，就是要识别出领域中所有的重要元素以及它们之间的协作关系。问题域的分析模型是用解答域提供的工具和手段实现出来的。而解答域就是我们的技术工具或方法论。架构师需要通过合理的使用方法论和工具，实现简单、可靠、完整、有效的架构。
除了对产品/项目的技术架构设计之外，架构师还需要为公司建立一套独立的技术体系，并在这个技术体系上建立公司的软件基础设施。帮助公司建立完善的内部基础设施，之后公司更快速的发展就是基于这些基础设施进行。
另外架构师的执业发展是需要有自己专注的方向的。因为
吾生也有涯，而知也无涯。 以有涯随无涯，殆已！&amp;ndash;《庄子·内篇·养生主第三》
所以，需要在技术方面有自己的特长方向。
3.关心运维 # 大学里有一门课叫：《软件工程》。这门课里面一个很重要的概念就是在软件生命周期中，软件处于维护期的时间要远大于其他阶段的事件。而业界对运维的态度都是找个人看着，不要报个什么错都找我就行。更不用提怎样进行线上问题定位？怎样进行线上性能分析？怎样进行线上快速伸缩？
所以，作为一个架构师，我最关心的运维。
4.其它 # 除了上面这些重要的事项外，还有很多公司内外的事项需要架构师参与与解决。不过这里不像让这些事情喧宾夺主，所以，不对商务，管理，过程，运营等事情进行说明。不过针对这些事项架构师还是要投入一定的精力进行关注的。
总结 # 技术在不断的发展，我们需要不断的努力才能跟上技术的步伐。所以在这个过程中会发现非常累。但每个人工作、生活、学习中不可能总是一帆风顺的。在自己选择的领域内不断的学习，不断的成长，不断的发展。总是可以得到自我满足感的。</description></item><item><title>08 终极问题-企业业务架构设计</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/08-%E7%BB%88%E6%9E%81%E9%97%AE%E9%A2%98-%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/08-%E7%BB%88%E6%9E%81%E9%97%AE%E9%A2%98-%E4%BC%81%E4%B8%9A%E4%B8%9A%E5%8A%A1%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>参考： # 如何做商业战略分析模型？ 四步实现企业战略规划，具体公司案例分析</description></item><item><title>09 为什么你是架构师？（怎么成为架构师）</title><link>https://guowei1651.github.io/architecture/00.knowledge-system/09-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%98%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%80%8E%E4%B9%88%E6%88%90%E4%B8%BA%E6%9E%B6%E6%9E%84%E5%B8%88/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/00.knowledge-system/09-%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%98%AF%E6%9E%B6%E6%9E%84%E5%B8%88%E6%80%8E%E4%B9%88%E6%88%90%E4%B8%BA%E6%9E%B6%E6%9E%84%E5%B8%88/</guid><description>0. 背景 # 想成为架构师或者已经是架构师的同学有没有问过自己一个问题：**为什么你是架构师？**其实就是问问自己为什么想成为架构师，是不是真的是一个架构师？架构师只是一个称呼，并不是你拥有了这个称呼就是架构师了。最主要的问题还是架构师和其他岗位同事的思维模式是有质的区别的。
很多公司为了职级的完整性而定义的架构师，技术专家到底是不是同一个概念？在某些时候授予了一些人，做了一些事可以认为他们就是架构师了吗？我们这里讨论和追逐的真理是你自己本身认为你是个架构师，而不是外部的授予。
本文主要从几个方面为什么你是架构师：
为什么你是架构师？ 主要以排除法说明什么岗位的同事并不是架构师。 架构师的目标与定位 架构师以什么作为目标和责任来帮助团队完成系统研发工作。 架构师的思维方式（重点） 架构师最主要的与其他人不同的点。 架构师的执行力（架构师落地的过程） 架构师要有自己的执行能力，去具体的落地架构设计以及解决落地过程中的问题。 架构师的沟通能力（架构师核心的说服力） 与团队，上级之间沟通推行架构设计中的目标。 1. 为什么你是架构师？ # 架构师不是框架师、不是算法工程师、不是高级程序员、不是项目经理。架构师与这些岗位的同事有着很多共同点，导致很多在软件行业从业多年的人都分不清他们之间的区别。本文从不同点出发说明架构师的特点。
1.1 架构师并非框架师 # 框架和架构的区别大家都是知道的，可以说框架也是有架构的。并且框架的问题域中有一个问题是怎么解决业务软件开发过程中的架构问题。所以说，框架影响着架构但框架并不是架构。因为架构中除了框架外还有中间件、组件需要由架构师来处理，描述框架、中间件、组件等之间的关系是架构设计过程中技术选型内的一部分。
对框架的架构进行设计与演进也是架构师的工作，就现在来说软件开发基础设施的开发团队很少，并且软件框架的架构设计技术了解的人也很少。所以，可以认为框架只不过是一种特殊的软件，它解决的是软件开发与运行阶段的问题。
可以说对于架构师来说，框架只不过是一种特殊的软件，就看要实现的软件是框架、中间件、组件还是业务软件根据软件所处领域的不同进行针对这个领域中的问题进行分析和解决即可。
1.2 架构师并非算法工程师 # 随着软件系统规模的增加，计算相关的算法和数据结构不再构成主要的设计问题；当系统由许多部分组成时，整个系统的组织，也就是所说的“软件架构”，导致了一系列新的设计问题。 &amp;ndash;《An Introduction to Software Architecture》卡内基·梅隆大学的 Mary Shaw 和 David Garlan，1994 年
在我之前的文章中架构设计00-架构师知识体系10-对软件认知层次的思考中有详细的说明代码是由数据结构和算法组成的，在代码之上还有程序、软件、系统、平台、企业架构这几个层次。所以，算法是组成软件系统不可或缺的内容，但算法在软件系统中绝对不是主角。
根据上面mary和david所描述的由于软件规模在不断的扩大，架构更多的工作用来解决规模问题。而不是算法和数据结构问题。
1.3 架构师并非高级程序员 # 架构设计的关键思维是判断和取舍， 程序设计的关键思维是逻辑和实现。很多程序员在转变为架构师后，很难一开始就意识到这个差异，还是按照写代码的方式去思考架构，这样会导致很多困惑。&amp;ndash;李运华《从零开始学架构：照着做，你也能成为架构师》
架构设计与软件编程一样，有很多中模式、方法。具体使用那种模式、方法进行实施工作并不是确定的，这样就会有优化的架构和粗陋的架构，优秀的代码和低劣的代码之分。而对于架构师来说设计模式、架构模式、架构风格在实践中的运用就成为了判断架构师能力的最基本方法。优秀的架构师可以让这些有机的结合并高效的解决问题。而高级开发能写清楚设计模式已经很不错了。造成这个的区别就在于决策方式与过程的不同。
1.4 架构师并非项目经理 # 项目经理的职责是让软件能够在有限的资源与时间的情况下保质保量的交付。而架构师为这个过程提供技术支持让软件能够平顺的落地。所以架构师必须懂软件过程过程管理，但并不是实际操作这部分内容。
1.5 架构师并非运维工程师 # 很多架构师都是运维出身的，这是不争的事实。不过像架构师不是高级开发一样，运维工程师成为架构师之后也需要思维上的转变。需要从原先的以系统稳定、系统性能、系统安全而努力，转变为整个系统支撑、提供可行的解决方案。
2. 目标与定位 # 明确了哪些不是架构师，这里再说明哪些是架构师应该持有的理念。作为架构师实际的、落地的工作是很重要的，但应该要想清楚在实际的设计与落地过程中我们为什么这样做。应该抱着怎样的理念去推进我们的工作。
2.1 定位：业务与技术之间的桥梁 # 软件架构设计的最终目标就是跨越业务需求与软件实现之间的鸿沟，而在跨域这个鸿沟需要做的就很多。需要想尽一切办法满足业务与非功能需求的同时，还要让实现团队能够接受设计中的复杂度，以实际可行的方式设计出架构实现路径才能有益的沟通业务团队与技术团队。
2.2 目标： # 就像之前评价一个公司的层次一样：有理想、有目标、有原则、有方法，理解清楚通过具体化的目标来实现定位中的内容这样层次递进的方式来逐步的细化来提高可行性。
通过适度设计来制定更加贴近实施过程的设计，并尽量的做到以推迟决策，快速决策的方式推进实施工作。以控制复杂度来理清业务与技术的复杂度，并以合理有效的方式解决实现过程中的复杂度。做软件研发只有一个目标就是提供有价值的软件，而有价值的软件就必须从架构的角度服务软件研发过程。</description></item></channel></rss>