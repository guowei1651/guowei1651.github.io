<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02.分析与设计 on</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/</link><description>Recent content in 02.分析与设计 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://guowei1651.github.io/architecture/02.analysis-and-design/index.xml" rel="self" type="application/rss+xml"/><item><title>01 概述</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/01-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/01-%E4%BB%8B%E7%BB%8D/</guid><description>togaf ArchiMate
DDD MDA
参考： # 架构语言ArchiMate － 开篇：企业架构语言ArchiMate介绍</description></item><item><title>02 DDD 01 从入门到放弃</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd01-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd01-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</guid><description>概述 # 道德绑架
无知既是力量
因噎废食。
根本问题 # 1. 不用DDD是不是可以解决问题？ # 就像微服务的一个最重要的问题是，可以提供服务的独立演进能力。但是基于接口的独立演进能力，因为接口的设计问题导致失去了该功能。
《企业应用架构模式》书中提到了三种主要策略：事物脚本、表模块和领域模型。
2. 解决的复杂度与增加的复杂度？ # 你可能认为：这种架构风格需要大量的额外工作，我们解决了一些问题，但同时又引入了另外的问题，并且我们需要编写更多的代码。
但无论如何，不要急于否定这种架构。在某些情况下，新政的复杂度是合理的。请记住，CQRS旨在解决数据显示复杂性问题，而不是什么绚丽的新风格以使你的简历添光加彩。
3. 为了保持企业的竞争力，核心域在不断的变化，怎么适应？ # 分析 # 0. 认知规律与DDD的认知需要之间的关系？ # 1. 对业务的认识过程 # 2. 对DDD的认知过程 # 开始就得用反模式：CQRS。
画一张DDD中的概念以及概念间的关系图。超级复杂的图
1. DDD推荐的都是反常识的。 # 限制实时性依赖。
2. 内部冲突 # REST和DDD vs 应用服务的概念之间的冲突。
六边形架构中的应用层 与 CQRS中的查询模型 之间的冲突。
《实现领域驱动设计》中说《子域和限界上下文是一一对应的》而《领域驱动设计学习手册》中说每个限界上下文可以包含多个子域，这样限界上下文就是一个物理边界，而它所包含的每个子域就是一个逻辑边界。
1. MVP与DDD之间的关系是不是一个事物的两面？ # 2. 敏捷与DDD之间的冲突？ # 有限的设计与彻底分析之间的鸿沟
3. 什么时间开始做DDD？ # 项目开始做？重构时做？
缺点总结 # 1. 学习曲线过于陡峭 # 概念多，概念的实施方式说明少 将模型显化展示的难度高 2. 理论与实践脱节 # 领域模型与实现模型分离，导致领域模型与实现模型不一致 领域模型与数据库模型分离，导致领域模型与数据库模型不一致 战术与战略设计不一致的问题 3.</description></item><item><title>02 DDD 01 概述</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd00-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd00-%E4%BB%8B%E7%BB%8D/</guid><description># 参考 # 如何一步一步用DDD设计一个电商网站（一）—— 先理解核心概念 理论篇：当中台遇上DDD，我们该如何设计微服务
DDD-领域驱动设计示例 当中台遇上 DDD，我们该如何设计微服务？ 领域驱动设计之理论篇：应对复杂业务和提升系统弹性之道</description></item><item><title>02 DDD 02 为什么要用DDD</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd02-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8ddd/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd02-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8ddd/</guid><description>从开发过程中的实际问题出发，给出这些问题在DDD中的解决方式以及引申意义。以方法论的方式将这些整理出来，可以将方法借用到其他地方，并不需要完整的使用DDD。
如果你要构建的软件系统没有什么业务复杂度，领域驱动设计就发挥不了它的价值；如果构建软件的团队对于软件复杂度控制漠不关心，只顾着追赶进度而采取“头疼医头，脚疼医脚”的态度，领域驱动设计这套方法可能入不了他们的法眼。-《解构领域驱动设计》2.4 冷静认知
0. 背景 # 0.1 秩序 # 如果没有遇到过类似于复杂问题，并自己想过办法去处理复杂问题在代码层面的呈现。没有遇到并处理过这类问题时，则本文中所阐述的问题对于你来说没有意义。 从无序中建立秩序，在别人未意识到的领域内，建立规则。
根本没人能看懂你在做什么 建立起来的规则，需要传播给其他人去追随 规模 就比如自家装修和建设城市的区别：管网设计，道路设计，基础设施设计都有根本上的不一致。 所以，就需要先跟读者说清楚DDD的背后思维逻辑是什么，才可真正的接受并解决问题。
0.2 架构 # 从更大的范围来说，术语“架构”总是意味着“不变的深层次结构”&amp;ndash;Stewart Brand, 《How Buildings Learn》
我们希望你现在已经理解，如果你的系统要满足其品质要求，架构决定是很重要的，你需要注意架构，有意识地做出这些决定，而不只是“让架构自动出现”。&amp;ndash;《架构之美》
控制复杂度
有意识的去管理过程
0.3 没有银弹 # 人月神话
0.4 发现问题、分析问题、解决问题 # 正确定义问题，比解决问题重要一百倍
学习DDD要先了解它解决了那个问题域中的问题，解决方案是什么样的。
1.认知级别 # 1.1 软件认知的七级别 # 在架构设计与实现过程中，需要对软件系统做全局的分析与考虑以求全局的认知。在分析和考虑过程中软件的不同层次都有独特的问题。为了在设计阶段做出更全面的决策，以解决绝大部分实现过程中可能遇到的问题，需要对软件开发过程中不同的层次的工作内容进行具体的分析。
所以需要对软件设计与决策提供全局框架，并把握每个层次的关键点。
理解清楚你所使用的解决方案在哪个层次，并解决了哪些问题。哪些问题是未被意识到的，未被解决的。战略设计 与 战术设计在不同的层次中完成。架构设计不可能能用一张图或者一个文档描述清楚所有的内容。
模块层面 archunit：处理的是依赖关系，即实体、服务的边界的定义
代码层面 sonar，p3c，PMD，jacoco，lint等。都可以进行代码级别的扫描，是代码一级的保证方式。iPlasma主要用来检测上帝类
1.2 从无序中建立秩序 # 分不清，用不清的设计模式
1.3 内卷：低层次/质量竞争 # 只知道代码层面的内容，只会代码层面的内容。不知道代码层面之上还有6个级别。那么大家就只能在代码层面上进行竞争了。
1.4 知道技术细节并不意味着可以用在自己的代码中。 # 例如在Redis中使用布隆过滤时使用的是那种数据结构存储bitmap的？
1.5 有没有被问过读过开源项目代码 # 他们的问的到底是什么？那是问你知不知道细节，另外问的是有没有理解面向对象？
1.6 反模式 # 适度耦合&amp;ndash;《演进式架构》</description></item><item><title>02 DDD 03 DDD的性能实践</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd03-ddd%E7%9A%84%E6%80%A7%E8%83%BD%E5%AE%9E%E8%B7%B5/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/02-ddd03-ddd%E7%9A%84%E6%80%A7%E8%83%BD%E5%AE%9E%E8%B7%B5/</guid><description>六边形架构中的业务与技术的解耦与整合。
CQRS中的性能。
SOA服务群的概念。
参考 # 领域驱动设计在互联网业务开发中的实践</description></item><item><title>03 MDD</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/03-mdd/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/03-mdd/</guid><description/></item><item><title>04 ADD</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/04-add/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/04-add/</guid><description/></item><item><title>05 风险驱动</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/05-%E9%A3%8E%E9%99%A9%E9%A9%B1%E5%8A%A8/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/05-%E9%A3%8E%E9%99%A9%E9%A9%B1%E5%8A%A8/</guid><description/></item><item><title>06 演进驱动</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/06-%E6%BC%94%E8%BF%9B%E9%A9%B1%E5%8A%A8/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/06-%E6%BC%94%E8%BF%9B%E9%A9%B1%E5%8A%A8/</guid><description/></item><item><title>07 ABSD</title><link>https://guowei1651.github.io/architecture/02.analysis-and-design/07-absd/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/02.analysis-and-design/07-absd/</guid><description/></item></channel></rss>