<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>14.学习总结 on</title><link>https://guowei1651.github.io/architecture/14.summarize/</link><description>Recent content in 14.学习总结 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://guowei1651.github.io/architecture/14.summarize/index.xml" rel="self" type="application/rss+xml"/><item><title>01 【翻译】软件架构指南</title><link>https://guowei1651.github.io/architecture/14.summarize/01-%E7%BF%BB%E8%AF%91%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8C%87%E5%8D%97/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/01-%E7%BF%BB%E8%AF%91%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E6%8C%87%E5%8D%97/</guid><description>本指南是[martinfowler.com]上关于软件架构的材料指南。原文地址为：https://martinfowler.com/arch</description></item><item><title>02 恰如气氛的软件架构</title><link>https://guowei1651.github.io/architecture/14.summarize/02-%E6%81%B0%E5%A6%82%E6%B0%94%E6%B0%9B%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/02-%E6%81%B0%E5%A6%82%E6%B0%94%E6%B0%9B%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84/</guid><description>第一章 概述 # 1.1 分治、只是与抽象 # 为了解决软件的复杂度以及规模增长带来的问题，开发者需要精良的武器。这些武器可以分为：分治、知识、抽象。开发者</description></item><item><title>03 【翻译】分布式系统模式</title><link>https://guowei1651.github.io/architecture/14.summarize/03-%E7%BF%BB%E8%AF%91%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/03-%E7%BF%BB%E8%AF%91%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%BC%8F/</guid><description>本文是martinfowler.com上关于分布式系统模式的文章。原文地址为：Patterns of Distributed Systems。如有侵权请联系我。 分布式系</description></item><item><title>04 【翻译】请求管道</title><link>https://guowei1651.github.io/architecture/14.summarize/04-%E7%BF%BB%E8%AF%91%E8%AF%B7%E6%B1%82%E7%AE%A1%E9%81%93/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/04-%E7%BF%BB%E8%AF%91%E8%AF%B7%E6%B1%82%E7%AE%A1%E9%81%93/</guid><description>本文是martinfowler.com上关于分布式系统模式的文章。原文地址为：Request Pipeline。如有侵权请联系我。 通过在连接上</description></item><item><title>05 【翻译】如何系统学习软件设计和架构</title><link>https://guowei1651.github.io/architecture/14.summarize/05-%E7%BF%BB%E8%AF%91%E5%A6%82%E4%BD%95%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%9E%B6%E6%9E%84/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/05-%E7%BF%BB%E8%AF%91%E5%A6%82%E4%BD%95%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%9E%B6%E6%9E%84/</guid><description>本文是khalilstemmler.com上关于如何系统学习软件设计和架构的文章。原文地址为：How to Learn Software Design and Architecture | The Full-stack Software Design &amp;amp; Architecture Map。如有侵</description></item><item><title>06 【翻译】处理遗留系统替换的模式</title><link>https://guowei1651.github.io/architecture/14.summarize/06-%E7%BF%BB%E8%AF%91%E5%A4%84%E7%90%86%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E6%9B%BF%E6%8D%A2%E7%9A%84%E6%A8%A1%E5%BC%8F/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/06-%E7%BF%BB%E8%AF%91%E5%A4%84%E7%90%86%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E6%9B%BF%E6%8D%A2%E7%9A%84%E6%A8%A1%E5%BC%8F/</guid><description>本文是martinfowler上关于真对遗留系统的处理的文章。原文地址为：Patterns of Legacy Displacement。如有侵权请联系我。 对</description></item><item><title>07 【翻译】Gossip传播</title><link>https://guowei1651.github.io/architecture/14.summarize/07-%E7%BF%BB%E8%AF%91gossip%E4%BC%A0%E6%92%AD/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/07-%E7%BF%BB%E8%AF%91gossip%E4%BC%A0%E6%92%AD/</guid><description>本文是martinfowler上关于分布式系统模式中的一篇文章。原文地址为：Gossip Dissemination。如有侵权请联系我。</description></item><item><title>08 【翻译】SaaS-IaaS-PaaS-aPaaS-HpaPaaS之间有什么区别？</title><link>https://guowei1651.github.io/architecture/14.summarize/08-%E7%BF%BB%E8%AF%91saas-iaas-paas-apaas-hpapaas%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/08-%E7%BF%BB%E8%AF%91saas-iaas-paas-apaas-hpapaas%E4%B9%8B%E9%97%B4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</guid><description>原文是What’s the difference between SaaS / IaaS / PaaS / aPaaS / HpaPaaS? 2019年9月16日 鲍比·兰卡斯特 过去20年中，互联网服务的增长引入了一组新的缩写词，用于描述不同</description></item><item><title>09 Low-Code-aPaas实施过程</title><link>https://guowei1651.github.io/architecture/14.summarize/09-low-code-apaas%E5%AE%9E%E6%96%BD%E8%BF%87%E7%A8%8B/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://guowei1651.github.io/architecture/14.summarize/09-low-code-apaas%E5%AE%9E%E6%96%BD%E8%BF%87%E7%A8%8B/</guid><description>背景 # 客制化为什么是必须的？ # 客制化要做什么？ # 业界怎么做客制化？ # https://docs.apicloud.com/ 国外的OutSystems、Mendix，国内的明道云、氚云，明道云 我</description></item></channel></rss>