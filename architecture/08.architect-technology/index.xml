<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>08.架构师技术 on</title><link>https://doks.netlify.app/architecture/08.architect-technology/</link><description>Recent content in 08.架构师技术 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 22 Apr 2023 12:52:56 +0800</lastBuildDate><atom:link href="https://doks.netlify.app/architecture/08.architect-technology/index.xml" rel="self" type="application/rss+xml"/><item><title>00 概述</title><link>https://doks.netlify.app/architecture/08.architect-technology/00-%E4%BB%8B%E7%BB%8D/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/architecture/08.architect-technology/00-%E4%BB%8B%E7%BB%8D/</guid><description/></item><item><title>01 怎么画架构图</title><link>https://doks.netlify.app/architecture/08.architect-technology/01-%E6%80%8E%E4%B9%88%E7%94%BB%E6%9E%B6%E6%9E%84%E5%9B%BE/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/architecture/08.architect-technology/01-%E6%80%8E%E4%B9%88%E7%94%BB%E6%9E%B6%E6%9E%84%E5%9B%BE/</guid><description>0. 前言 # 0.1 业界现状 # 在软件业界有一个说法：PPT架构师。PPT架构师的由来肯定是因为架构师有很大一部分工作在做PPT或者在讲PPT。一方面“画图”在架构师的工作占比中已经非常大了。另外一方面也代表着架构师画图能力代表着成为架构师所必要的能力。
0.2 架构师必不可缺 # 软件研发最简单的理解是：使用技术解决业务问题。而对于技术的使用过程是怎样的过程是需要架构师进行管理的，并在软件系统发展过程中对于技术治理工作还是需要架构师处理的。架构师公司发展过程中还需要将公司的发展纳入到技术演进过程中。所以说架构师在公司发展过程中是必不可缺的。
0.3 本文概要 # 鉴于此架构师用“图”来描述系统工程规范、技术规范、业务转换架构过程、架构、流程等等内容，并将“图”交付给团队进行实施。在”架构设计“过程中这么大的画图工作量，架构师肯定要明确的知道：
为什么要画图？ 说明画图是为了解决什么问题的。 什么是架构图？ 说明什么样的图是架构图。 怎么画架构图？ 说明以什么样的过程，什么样的规则可以画出好的图。 用什么画架构图？ 说明用什么工具什么样的图比较合适。 总结一下 最后讨论一下：画图是一种技能吗？ 1. 为什么画架构图？ # 很多研发人员对于软件的认知：软件开发就是在处理细节。处理各种各样的细节，在软件研发的各个阶段。靠人把所有的细节全部记住？还是靠某种机制将细节记录下来？这只是为什么要画架构图中的一个最简单的原因，其他原因可以看下面。
1.1 为什么要画图 # 画图其实是承载了设计中的信息，以图的形式进行传递。那为什么很多团队还是不进行设计呢？
1.1.1 为什么不设计？ # 设计是反人类的。 就像学习是反人类的一样。很多人理不清到底要做什么，只有在实现过程遇到了才能知道有这个问题，并解决这个问题。 容易被人挑战 没有设计方法、不体系化、遗漏等问题使提出的解决方案有很多点都会被挑战。 意识到问题是问题 没有设计大家也过的挺好的，为啥要设计？所以意识到没有设计是个问题是很很重要的问题。没意识问题的存在就永远解决不了问题。 1.1.2 为什么要设计？ # 战术编程的问题 FaceBook 是一个鼓励战术编程的公司。原公司座右铭：&amp;ldquo;快速行动，打破常规&amp;rdquo;，后来意识到问题改成了&amp;quot;以坚实的基础设施快速发展&amp;quot;。
战术编程的问题在于它是短视的。-《软件设计哲学 3.1 战术编程》
识别风险，理清计划 前面的文章中有讨论为什么要设计，这里也是参照02.终极问题&amp;ndash;为什么要架构设计？。
一个公司可以用任何一种方法取得成功。然而，在一家关心软件设计并拥有干净代码库的公司工作要有趣得多。-《软甲设计哲学 3.4 创业与投资》 ##1.2 系统复杂度从哪里而来？怎么解决？ ###1.2.1 系统复杂度从哪里而来？ 业务本身复杂度 为了创建真正能耐为用户活动所用的软件，开发团队必须运用一整套与这些活动有关的知识体系。所需知识的广度可能令人望而生畏，庞大而复杂的信息也可能超乎想象。那怎么才能让实现过程中一直都能记清之前的想法是什么样的？
演化过程中的复杂度 在软件系统的发展过程中，在新增或修改业务时未进行良好的设计的业务进入到系统后就会带来混乱。这种混乱会不断的在技术组件间传播扩散，甚至可能传播到系统之外。
1.2.2 怎么解决？ # cynefin问题认知框架就是用来解决复杂问题的。主要的方式就是将复杂问题使用各自对应的方法将问题变为简单问题，然后再解决简单问题。 在通过对微服务大泥球的整理与处理之后，可以看到与之前的大泥球有很大的不同。
1.3 细节重要还是整体重要？ # 上一节已经讨论到了软件中有很多很多的细节，细节导致了复杂度指数级的提升。那么解决问题的时候就需要关注并解决所有的细节吗？</description></item><item><title>02 中台</title><link>https://doks.netlify.app/architecture/08.architect-technology/02-%E4%B8%AD%E5%8F%B0/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/architecture/08.architect-technology/02-%E4%B8%AD%E5%8F%B0/</guid><description>微服务架构何去何从？
DDD：架构思想的旧瓶新酒
一个通用的数据中台架构应该如何构建？ 数据中台应该包含什么？
滴滴业务中台的实践与思考
eBay 管理庞大服务架构的新方法 “中台”是架构的捷径吗？ 贝壳金服史海峰：中台虽百家争鸣，但不是所有企业必需品 浙江移动数据中台的建设和应用实践 宜信微服务架构落地及其演进 中台之上（九）：如何基于企业级业务架构管理业务需求？ 小团队也能做中台</description></item><item><title>03 遗留系统升级</title><link>https://doks.netlify.app/architecture/08.architect-technology/03-%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/architecture/08.architect-technology/03-%E9%81%97%E7%95%99%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7/</guid><description>参考： # 软件为什么会沦为遗留系统？ 征服遗留系统 最头疼的遗留系统该如何改造？
CCB只管决策，不管分析，那么这个分析工作是谁做的呢？</description></item><item><title>04 怎样将One-ID、One-Model、One-Service推演成为One-Data</title><link>https://doks.netlify.app/architecture/08.architect-technology/04-%E6%80%8E%E6%A0%B7%E5%B0%86one-idone-modelone-service%E6%8E%A8%E6%BC%94%E6%88%90%E4%B8%BAone-data/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/architecture/08.architect-technology/04-%E6%80%8E%E6%A0%B7%E5%B0%86one-idone-modelone-service%E6%8E%A8%E6%BC%94%E6%88%90%E4%B8%BAone-data/</guid><description>参考： # 数据中台核心方法论&amp;ndash;OneModel为何需要产品化支撑？ 构建数据中台过程中，OneModel即统一数据及管理理论的提出背景</description></item><item><title>05 中台设计与实现方法</title><link>https://doks.netlify.app/architecture/08.architect-technology/05-%E4%B8%AD%E5%8F%B0%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/architecture/08.architect-technology/05-%E4%B8%AD%E5%8F%B0%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</guid><description>描述中台的设计原则与实现细节考量
按场景进行能力实现与输出。
Dubbo文档中有：
粒度 # 服务接口尽可能大粒度，每个服务方法应代表一个功能，而不是某功能的一个步骤，否则将面临分布式事务问题，Dubbo 暂未提供分布式事务支持。
服务接口建议以业务场景为单位划分，并对相近业务做抽象，防止接口数量爆炸。
不建议使用过于抽象的通用接口，如：Map query(Map)，这样的接口没有明确语义，会给后期维护带来不便。
参考： # 条件型业务规则的抽象与实现——从 Spring Profile 得到的灵感 Screaming Architecture 服务化最佳实践</description></item><item><title>06 服务治理</title><link>https://doks.netlify.app/architecture/08.architect-technology/06-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</link><pubDate>Sat, 22 Apr 2023 12:52:56 +0800</pubDate><guid>https://doks.netlify.app/architecture/08.architect-technology/06-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</guid><description>概述 # 随着公司的业务、团队的不断更迭、增长，原有的软件系统已经不能很好的解决现在的问题。这样的一个软件系统已经在各个方面产生了问题，它已经限制了公司的业务的持续增长、甚至已经不能进行正常的维护开发工作。
不可避免 从软件系统初始阶段，所有的衔接上下文都是清晰可变的。而随着业务的增长会想限界上下文中添加概念。而在此过程中，通常团队并不清楚应该何时停止向领域模型中注入越来越多的概念。或许刚开始时这个模型很小也能被管理。然而随着团队不断地注入更多概念，很快便出现了 一个大麻烦。不仅概念太多，而且模型中的语言也变得模糊不清，因为在你思考它时，会发现在这个巨大的、混乱的、漫无边际的模型中实际存在着多种语言。因为这样或那样的错误，团队常常会将全新的软件产品变成一个所谓的大泥球。
总会发生 对于随着公司的成长而不断成长的软件系统来说，走到这一步是迟早的问题。而走到这一步只取决于团队的技术能力，团队的技术能力好一些这个时刻会晚到一些，技术能力弱一些这个时刻会早到一些。
饮鸩止渴 对于这类问题公司基本可以想到的解决办法就是外部招聘有能力，有经验的人帮助解决问题。但对于一个新加入的或者是咨询师来说对公司业务的了解需要时间，对公司未来的发展也需要时间的理解。而对于现在浮躁的互联网界来看新入职的人有这样耐心的几乎没有，再加上浮躁的互联网公司的处理这件事的耐心。导致人员与公司之间永远在时间上匹配上。这样就导致公司不断的招聘新的处理业务混乱的人才，而这些人在又在不断的流失。
对于限制业务发展、代码无法维护的问题是怎么发生的？有哪些解决策略？以及具体怎样解决这些问题？将会在后面逐步进行讨论。
问题原因 # 一个有几年沉淀的公司来说都面对着同样的问题，技术已经制约了业务的发展，原来可以很快上线的功能到现在很难上线，上线了也经常有很多问题。随着一个软件系统经过多年的发展，经过多个不同开发人员的手之后变得难以维护，难以迭代更新。这种问题在有几年历史的公司中非常常见，而这种公司基本上没有办法解决这个问题。
为什么发生这种问题的公司没有自己解决？
如果发生这种问题，代表公司的技术水平有限； 对于技术水平的有限是在业务的持续演化过程中未能将技术实施计划、设计落实到具体的工作中，或是因为根本没有技术实施计划导致的。这说明整体公司的技术水平有限，因为公司中任何人都未能提出并未解决这个问题。 如果发生这种问题，代表公司的从业人员能力有限； 而从业人员能力预示着一个公司遇到这类问题的时间是长是短，人员能力好一些则公司遇到这类问题的时间会长，人员能力弱一些则在很快的时间内就会遇到类似问题。 能严重到这种地步代表着公司整体的监管能力有限。 监管能力说明公司对与业务和团队的管控力，如果遇到这样的问题，也说明公司对于团队和业务的管控能力都不足。 要弄懂这个怎么解决，就必须明确问题是怎么产生的。并且明确问题所在之后才可以针对问题制定解决方案。而解决这个问题不可能一次性解决所有问题，所以最少应该朝着规避这些问题的方向前行。这里总结的问题都经过了抽象，并进行进一步解释。但为了保护作者所在公司的利益，不对具体问题进行描述。下面就具体说明其中会有哪些问题：
限制业务发展 # 在业务服务发展到一定阶段之后，会发现修改代码非常困难。在这个过程中直接感受是修改代码过于麻烦，但问题的根源并不是在代码这个层面上。
数据模型未跟着业务的发展持续演进 在持续的迭代过程中数据模型被各种的业务不断的拉扯，让其从原来规整的数据模型变成一个张牙舞爪的数据模型。这样其实就会造成各种业务错综复杂，并且这种方式还会在不同的业务模块间传播。 业务支持不完善 在业务实现过程中，对于现有业务抽象不足造成问题在发展新的业务时都需要进行实现。这样就造成了不断的实现新的业务，不断的为新业务造代码。越来越多的代码不断的添加。 业务逻辑分散修改困难 划分了微服务之后，新业务会随着最靠近的服务进行实现。在实现过程中总会遇到业务边界不清晰的问题，这个时候就会随意的选择一个服务对业务进行实现。而这样的事情越来越多，就会发现业务逐渐的分散在不同的服务中。再加上需要串联起来的业务，就变成了一个业务分散在不同的服务中。 业务过于庞杂，直接理解 业务模型中的细节在持续的迭代中不断的增加，而这些增加过程有遗落在每次的需求中。使业务细节无法使用一个文档整体的描述，也无法一次性学习。这样造成业务越发展越大、越发展越乱。 人员能力要求高 在上述问题下就变成了，需要的人的能力越高越好。只有能力高的人才可以将业务了解，并对其进行修改。 知识体系丢失 # 作者在《04.软件产品公司竞争力》说明过业务知识是公司的核心竞争力。对于核心竞争力的承载是业务知识，而业务知识的承载可能性就很多。例如：工作人员人脑中的知识、需求PRD中、数据库设计中、代码中、文档中等。但对于这些承载形式最终还是要让团队内部达成共识。
业务知识流失殆尽 随着人员的流动业务知识也在不断的流失。而团队成员之间的业务知识传递不畅造成从一个业务知识丰富的人将业务知识流转到低业务知识的人是一个因人而异的问题。所以，业务知识在没有其他承载形式的情况下就会不断的流失。直至流失殆尽为止。 业务知识沉淀不足 现在很多软件过程都不推荐使用文档的形式进行需求的管理。而且现在软件研发人员的文档编写能力都很弱。导致几乎没有文字资料可以反应业务模型的情况。有文字资料也不能很好的描述一个模型。 业务知识获取困难 业务知识散落在不同的地方，所有的PRD都是针对迭代需求进行编写的。而针对业务模型进行描述的文档在没有业务驱动的情况下是不会被编写的。所以一个业务模型的规则分散在不同的文档中，而且还有一部分在人们头脑中的隐含知识。这样就造成如果要学习业务知识编程很困难的一件事。 持续迭代又无治理导致大泥球 # 不断的向限界上下文中添加概念，而这个添加的过程又不知道什么时候结束。这样就会造成在限界上下文中概念过多，关系过多。而造成大泥球的问题。 设计缺失 重要功能未有技术设计文档及评审。注重业务可用性，而未考虑技术设计合理性。 监管缺失 重要功能设计未受监管、实现过程也未受监管。为了追求业务快速上线，跳过了监管。 治理缺失 在发生问题之后不进行治理动作，而使用修改的办法去解决问题。再此过程中也会有业务治理工具缺失、技术治理工具缺失的问题。 能力体系建立能力欠缺 # 在业务发展过程中为了更快的建立业务能力，而建立起针对性的能力。而随着发展下次还有类似的需求，又建立一个类似的而又偏向于这个场景下的能力。能力就变成了哪里都有而任何一个其他地方都用不了的情况。
半拉子工程 为了快速的试错，而建立的系统。建立起来之后是不是就不管了？建起来之后具体怎样淘汰？怎样从mvp到真正产品阶段？对于一个系统的生命周期管理不进行管理造成问题。
重复造轮子 之前mvp造过一次，后面有个其他方向的mvp有造一遍。在发展出来两个完成体系之后没有对原先的能力进行熟悉而直接再造一个的。
公共服务维护力度不够 因为组织变更造成业务重新划分，但提供公共能力的服务永远会落在两个团队之间不管的地带。这样的服务对于两个团队来说都不是自己的业务核心那么就以为这不会有专门的规划去完成这部分的维护。
运维体系不完善 故障预案是运维最基本的能力体系。在很多时候都是线上发生问题了之后进行问题解决，这其实就凸显了运维能力、体系不完善的问题。
解决策略 # 遇到了问题不要退缩而应迎难而上，而且要解决根本性问题才对问题有意。如只是解决表面问题下回总是还会遇到类似问题。只有持续改进才能真正的解决问题。
幸福的家庭都是相似的，不幸的家庭各有各的不幸。&amp;ndash; 托尔斯泰《安娜·卡列尼娜》
约束 上一章节说明了具体的问题，而解决这些问题还有一些限制。这因为这些限制导致解决问题的难度大大的增加。故这些约束也是解决问题的前提。</description></item></channel></rss>